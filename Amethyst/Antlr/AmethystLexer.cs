//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, For=4, Return=5, Struct=6, Implements=7, Macro=8, 
		Inline=9, Virtual=10, Semi=11, Colon=12, Comma=13, LParen=14, RParen=15, 
		LSquareBrak=16, RSquareBrak=17, LBrak=18, RBrak=19, Eq=20, Plus=21, Minus=22, 
		Star=23, Slash=24, Not=25, PlusEq=26, MinusEq=27, StarEq=28, SlashEq=29, 
		Hash=30, EqEq=31, Neq=32, Gt=33, Gte=34, Lt=35, Lte=36, And=37, AndAnd=38, 
		OrOr=39, PlusPlus=40, MinusMinus=41, Dot=42, WeakRef=43, RawIdentifier=44, 
		String=45, Command=46, TargetSelectorVariable=47, Number=48, Whitespace=49, 
		Comment=50, LineComment=51;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "For", "Return", "Struct", "Implements", "Macro", 
		"Inline", "Virtual", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "TargetSelectorVariable", 
		"Number", "Whitespace", "Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'for'", "'return'", "'struct'", 
		"'implements'", "'macro'", "'inline'", "'virtual'", "';'", "':'", "','", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", 
		"'/'", "'!'", "'+='", "'-='", "'*='", "'/='", "'#'", "'=='", "'!='", "'>'", 
		"'>='", "'<'", "'<='", "'&'", "'&&'", "'||'", "'++'", "'--'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "For", "Return", "Struct", "Implements", 
		"Macro", "Inline", "Virtual", "Semi", "Colon", "Comma", "LParen", "RParen", 
		"LSquareBrak", "RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", 
		"Star", "Slash", "Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", 
		"EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", 
		"MinusMinus", "Dot", "WeakRef", "RawIdentifier", "String", "Command", 
		"TargetSelectorVariable", "Number", "Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,51,338,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
		1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
		1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
		1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,3,43,251,8,43,1,43,5,
		43,254,8,43,10,43,12,43,257,9,43,1,44,1,44,1,44,1,44,5,44,263,8,44,10,
		44,12,44,266,9,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,274,8,45,10,45,12,
		45,277,9,45,1,45,1,45,1,46,1,46,1,46,1,47,3,47,285,8,47,1,47,4,47,288,
		8,47,11,47,12,47,289,1,47,3,47,293,8,47,1,47,1,47,5,47,297,8,47,10,47,
		12,47,300,9,47,1,47,3,47,303,8,47,3,47,305,8,47,1,48,4,48,308,8,48,11,
		48,12,48,309,1,48,1,48,1,49,1,49,1,49,1,49,5,49,318,8,49,10,49,12,49,321,
		9,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,5,50,332,8,50,10,50,
		12,50,335,9,50,1,50,1,50,1,319,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
		89,45,91,46,93,47,95,48,97,49,99,50,101,51,1,0,11,3,0,65,90,95,95,97,122,
		5,0,45,45,47,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,34,
		34,92,92,2,0,10,10,13,13,5,0,97,97,101,101,110,110,112,112,114,115,1,0,
		48,57,8,0,66,66,73,73,76,76,83,83,98,98,105,105,108,108,115,115,2,0,46,
		46,48,57,4,0,68,68,70,70,100,100,102,102,3,0,9,10,13,13,32,32,350,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,1,103,1,0,0,0,3,113,1,0,0,0,5,116,1,0,0,0,7,121,1,0,0,
		0,9,125,1,0,0,0,11,132,1,0,0,0,13,139,1,0,0,0,15,150,1,0,0,0,17,156,1,
		0,0,0,19,163,1,0,0,0,21,171,1,0,0,0,23,173,1,0,0,0,25,175,1,0,0,0,27,177,
		1,0,0,0,29,179,1,0,0,0,31,181,1,0,0,0,33,183,1,0,0,0,35,185,1,0,0,0,37,
		187,1,0,0,0,39,189,1,0,0,0,41,191,1,0,0,0,43,193,1,0,0,0,45,195,1,0,0,
		0,47,197,1,0,0,0,49,199,1,0,0,0,51,201,1,0,0,0,53,204,1,0,0,0,55,207,1,
		0,0,0,57,210,1,0,0,0,59,213,1,0,0,0,61,215,1,0,0,0,63,218,1,0,0,0,65,221,
		1,0,0,0,67,223,1,0,0,0,69,226,1,0,0,0,71,228,1,0,0,0,73,231,1,0,0,0,75,
		233,1,0,0,0,77,236,1,0,0,0,79,239,1,0,0,0,81,242,1,0,0,0,83,245,1,0,0,
		0,85,247,1,0,0,0,87,250,1,0,0,0,89,258,1,0,0,0,91,269,1,0,0,0,93,280,1,
		0,0,0,95,284,1,0,0,0,97,307,1,0,0,0,99,313,1,0,0,0,101,327,1,0,0,0,103,
		104,5,110,0,0,104,105,5,97,0,0,105,106,5,109,0,0,106,107,5,101,0,0,107,
		108,5,115,0,0,108,109,5,112,0,0,109,110,5,97,0,0,110,111,5,99,0,0,111,
		112,5,101,0,0,112,2,1,0,0,0,113,114,5,105,0,0,114,115,5,102,0,0,115,4,
		1,0,0,0,116,117,5,101,0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,120,
		5,101,0,0,120,6,1,0,0,0,121,122,5,102,0,0,122,123,5,111,0,0,123,124,5,
		114,0,0,124,8,1,0,0,0,125,126,5,114,0,0,126,127,5,101,0,0,127,128,5,116,
		0,0,128,129,5,117,0,0,129,130,5,114,0,0,130,131,5,110,0,0,131,10,1,0,0,
		0,132,133,5,115,0,0,133,134,5,116,0,0,134,135,5,114,0,0,135,136,5,117,
		0,0,136,137,5,99,0,0,137,138,5,116,0,0,138,12,1,0,0,0,139,140,5,105,0,
		0,140,141,5,109,0,0,141,142,5,112,0,0,142,143,5,108,0,0,143,144,5,101,
		0,0,144,145,5,109,0,0,145,146,5,101,0,0,146,147,5,110,0,0,147,148,5,116,
		0,0,148,149,5,115,0,0,149,14,1,0,0,0,150,151,5,109,0,0,151,152,5,97,0,
		0,152,153,5,99,0,0,153,154,5,114,0,0,154,155,5,111,0,0,155,16,1,0,0,0,
		156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,108,0,0,159,160,5,105,0,
		0,160,161,5,110,0,0,161,162,5,101,0,0,162,18,1,0,0,0,163,164,5,118,0,0,
		164,165,5,105,0,0,165,166,5,114,0,0,166,167,5,116,0,0,167,168,5,117,0,
		0,168,169,5,97,0,0,169,170,5,108,0,0,170,20,1,0,0,0,171,172,5,59,0,0,172,
		22,1,0,0,0,173,174,5,58,0,0,174,24,1,0,0,0,175,176,5,44,0,0,176,26,1,0,
		0,0,177,178,5,40,0,0,178,28,1,0,0,0,179,180,5,41,0,0,180,30,1,0,0,0,181,
		182,5,91,0,0,182,32,1,0,0,0,183,184,5,93,0,0,184,34,1,0,0,0,185,186,5,
		123,0,0,186,36,1,0,0,0,187,188,5,125,0,0,188,38,1,0,0,0,189,190,5,61,0,
		0,190,40,1,0,0,0,191,192,5,43,0,0,192,42,1,0,0,0,193,194,5,45,0,0,194,
		44,1,0,0,0,195,196,5,42,0,0,196,46,1,0,0,0,197,198,5,47,0,0,198,48,1,0,
		0,0,199,200,5,33,0,0,200,50,1,0,0,0,201,202,5,43,0,0,202,203,5,61,0,0,
		203,52,1,0,0,0,204,205,5,45,0,0,205,206,5,61,0,0,206,54,1,0,0,0,207,208,
		5,42,0,0,208,209,5,61,0,0,209,56,1,0,0,0,210,211,5,47,0,0,211,212,5,61,
		0,0,212,58,1,0,0,0,213,214,5,35,0,0,214,60,1,0,0,0,215,216,5,61,0,0,216,
		217,5,61,0,0,217,62,1,0,0,0,218,219,5,33,0,0,219,220,5,61,0,0,220,64,1,
		0,0,0,221,222,5,62,0,0,222,66,1,0,0,0,223,224,5,62,0,0,224,225,5,61,0,
		0,225,68,1,0,0,0,226,227,5,60,0,0,227,70,1,0,0,0,228,229,5,60,0,0,229,
		230,5,61,0,0,230,72,1,0,0,0,231,232,5,38,0,0,232,74,1,0,0,0,233,234,5,
		38,0,0,234,235,5,38,0,0,235,76,1,0,0,0,236,237,5,124,0,0,237,238,5,124,
		0,0,238,78,1,0,0,0,239,240,5,43,0,0,240,241,5,43,0,0,241,80,1,0,0,0,242,
		243,5,45,0,0,243,244,5,45,0,0,244,82,1,0,0,0,245,246,5,46,0,0,246,84,1,
		0,0,0,247,248,5,94,0,0,248,86,1,0,0,0,249,251,7,0,0,0,250,249,1,0,0,0,
		251,255,1,0,0,0,252,254,7,1,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,
		1,0,0,0,255,256,1,0,0,0,256,88,1,0,0,0,257,255,1,0,0,0,258,264,5,34,0,
		0,259,263,8,2,0,0,260,261,5,92,0,0,261,263,7,3,0,0,262,259,1,0,0,0,262,
		260,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,
		0,0,0,266,264,1,0,0,0,267,268,5,34,0,0,268,90,1,0,0,0,269,270,5,64,0,0,
		270,271,5,47,0,0,271,275,1,0,0,0,272,274,8,4,0,0,273,272,1,0,0,0,274,277,
		1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,
		0,278,279,7,4,0,0,279,92,1,0,0,0,280,281,5,64,0,0,281,282,7,5,0,0,282,
		94,1,0,0,0,283,285,5,45,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,304,1,
		0,0,0,286,288,7,6,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,
		289,290,1,0,0,0,290,292,1,0,0,0,291,293,7,7,0,0,292,291,1,0,0,0,292,293,
		1,0,0,0,293,305,1,0,0,0,294,298,7,6,0,0,295,297,7,8,0,0,296,295,1,0,0,
		0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,302,1,0,0,0,300,
		298,1,0,0,0,301,303,7,9,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,305,1,
		0,0,0,304,287,1,0,0,0,304,294,1,0,0,0,305,96,1,0,0,0,306,308,7,10,0,0,
		307,306,1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,311,
		1,0,0,0,311,312,6,48,0,0,312,98,1,0,0,0,313,314,5,47,0,0,314,315,5,42,
		0,0,315,319,1,0,0,0,316,318,9,0,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,
		320,1,0,0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,
		42,0,0,323,324,5,47,0,0,324,325,1,0,0,0,325,326,6,49,0,0,326,100,1,0,0,
		0,327,328,5,47,0,0,328,329,5,47,0,0,329,333,1,0,0,0,330,332,8,4,0,0,331,
		330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,
		0,0,0,335,333,1,0,0,0,336,337,6,50,0,0,337,102,1,0,0,0,16,0,250,253,255,
		262,264,275,284,289,292,298,302,304,309,319,333,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
