//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, For=4, Return=5, Interface=6, Macro=7, NoStack=8, 
		Inline=9, Semi=10, Colon=11, Comma=12, LParen=13, RParen=14, LSquareBrak=15, 
		RSquareBrak=16, LBrak=17, RBrak=18, Eq=19, Plus=20, Minus=21, Star=22, 
		Slash=23, Not=24, PlusEq=25, MinusEq=26, StarEq=27, SlashEq=28, Hash=29, 
		EqEq=30, Neq=31, Gt=32, Gte=33, Lt=34, Lte=35, And=36, AndAnd=37, OrOr=38, 
		PlusPlus=39, MinusMinus=40, Dot=41, WeakRef=42, RawIdentifier=43, String=44, 
		Command=45, Integer=46, Whitespace=47, Comment=48, LineComment=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "For", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'for'", "'return'", "'interface'", 
		"'macro'", "'nostack'", "'inline'", "';'", "':'", "','", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'!'", 
		"'+='", "'-='", "'*='", "'/='", "'#'", "'=='", "'!='", "'>'", "'>='", 
		"'<'", "'<='", "'&'", "'&&'", "'||'", "'++'", "'--'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "For", "Return", "Interface", "Macro", 
		"NoStack", "Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
		1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
		1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,
		1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,3,42,
		239,8,42,1,42,5,42,242,8,42,10,42,12,42,245,9,42,1,43,1,43,1,43,1,43,5,
		43,251,8,43,10,43,12,43,254,9,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,262,
		8,44,10,44,12,44,265,9,44,1,44,1,44,1,45,3,45,270,8,45,1,45,4,45,273,8,
		45,11,45,12,45,274,1,45,3,45,278,8,45,1,45,1,45,5,45,282,8,45,10,45,12,
		45,285,9,45,1,45,3,45,288,8,45,3,45,290,8,45,1,46,4,46,293,8,46,11,46,
		12,46,294,1,46,1,46,1,47,1,47,1,47,1,47,5,47,303,8,47,10,47,12,47,306,
		9,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,317,8,48,10,48,
		12,48,320,9,48,1,48,1,48,1,304,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
		89,45,91,46,93,47,95,48,97,49,1,0,10,3,0,65,90,95,95,97,122,5,0,45,45,
		47,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,34,34,92,92,2,
		0,10,10,13,13,1,0,48,57,8,0,66,66,73,73,76,76,83,83,98,98,105,105,108,
		108,115,115,2,0,46,46,48,57,4,0,68,68,70,70,100,100,102,102,3,0,9,10,13,
		13,32,32,335,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
		0,1,99,1,0,0,0,3,109,1,0,0,0,5,112,1,0,0,0,7,117,1,0,0,0,9,121,1,0,0,0,
		11,128,1,0,0,0,13,138,1,0,0,0,15,144,1,0,0,0,17,152,1,0,0,0,19,159,1,0,
		0,0,21,161,1,0,0,0,23,163,1,0,0,0,25,165,1,0,0,0,27,167,1,0,0,0,29,169,
		1,0,0,0,31,171,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,0,37,177,1,0,0,0,39,
		179,1,0,0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,185,1,0,0,0,47,187,1,0,0,
		0,49,189,1,0,0,0,51,192,1,0,0,0,53,195,1,0,0,0,55,198,1,0,0,0,57,201,1,
		0,0,0,59,203,1,0,0,0,61,206,1,0,0,0,63,209,1,0,0,0,65,211,1,0,0,0,67,214,
		1,0,0,0,69,216,1,0,0,0,71,219,1,0,0,0,73,221,1,0,0,0,75,224,1,0,0,0,77,
		227,1,0,0,0,79,230,1,0,0,0,81,233,1,0,0,0,83,235,1,0,0,0,85,238,1,0,0,
		0,87,246,1,0,0,0,89,257,1,0,0,0,91,269,1,0,0,0,93,292,1,0,0,0,95,298,1,
		0,0,0,97,312,1,0,0,0,99,100,5,110,0,0,100,101,5,97,0,0,101,102,5,109,0,
		0,102,103,5,101,0,0,103,104,5,115,0,0,104,105,5,112,0,0,105,106,5,97,0,
		0,106,107,5,99,0,0,107,108,5,101,0,0,108,2,1,0,0,0,109,110,5,105,0,0,110,
		111,5,102,0,0,111,4,1,0,0,0,112,113,5,101,0,0,113,114,5,108,0,0,114,115,
		5,115,0,0,115,116,5,101,0,0,116,6,1,0,0,0,117,118,5,102,0,0,118,119,5,
		111,0,0,119,120,5,114,0,0,120,8,1,0,0,0,121,122,5,114,0,0,122,123,5,101,
		0,0,123,124,5,116,0,0,124,125,5,117,0,0,125,126,5,114,0,0,126,127,5,110,
		0,0,127,10,1,0,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,116,0,
		0,131,132,5,101,0,0,132,133,5,114,0,0,133,134,5,102,0,0,134,135,5,97,0,
		0,135,136,5,99,0,0,136,137,5,101,0,0,137,12,1,0,0,0,138,139,5,109,0,0,
		139,140,5,97,0,0,140,141,5,99,0,0,141,142,5,114,0,0,142,143,5,111,0,0,
		143,14,1,0,0,0,144,145,5,110,0,0,145,146,5,111,0,0,146,147,5,115,0,0,147,
		148,5,116,0,0,148,149,5,97,0,0,149,150,5,99,0,0,150,151,5,107,0,0,151,
		16,1,0,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,155,5,108,0,0,155,156,
		5,105,0,0,156,157,5,110,0,0,157,158,5,101,0,0,158,18,1,0,0,0,159,160,5,
		59,0,0,160,20,1,0,0,0,161,162,5,58,0,0,162,22,1,0,0,0,163,164,5,44,0,0,
		164,24,1,0,0,0,165,166,5,40,0,0,166,26,1,0,0,0,167,168,5,41,0,0,168,28,
		1,0,0,0,169,170,5,91,0,0,170,30,1,0,0,0,171,172,5,93,0,0,172,32,1,0,0,
		0,173,174,5,123,0,0,174,34,1,0,0,0,175,176,5,125,0,0,176,36,1,0,0,0,177,
		178,5,61,0,0,178,38,1,0,0,0,179,180,5,43,0,0,180,40,1,0,0,0,181,182,5,
		45,0,0,182,42,1,0,0,0,183,184,5,42,0,0,184,44,1,0,0,0,185,186,5,47,0,0,
		186,46,1,0,0,0,187,188,5,33,0,0,188,48,1,0,0,0,189,190,5,43,0,0,190,191,
		5,61,0,0,191,50,1,0,0,0,192,193,5,45,0,0,193,194,5,61,0,0,194,52,1,0,0,
		0,195,196,5,42,0,0,196,197,5,61,0,0,197,54,1,0,0,0,198,199,5,47,0,0,199,
		200,5,61,0,0,200,56,1,0,0,0,201,202,5,35,0,0,202,58,1,0,0,0,203,204,5,
		61,0,0,204,205,5,61,0,0,205,60,1,0,0,0,206,207,5,33,0,0,207,208,5,61,0,
		0,208,62,1,0,0,0,209,210,5,62,0,0,210,64,1,0,0,0,211,212,5,62,0,0,212,
		213,5,61,0,0,213,66,1,0,0,0,214,215,5,60,0,0,215,68,1,0,0,0,216,217,5,
		60,0,0,217,218,5,61,0,0,218,70,1,0,0,0,219,220,5,38,0,0,220,72,1,0,0,0,
		221,222,5,38,0,0,222,223,5,38,0,0,223,74,1,0,0,0,224,225,5,124,0,0,225,
		226,5,124,0,0,226,76,1,0,0,0,227,228,5,43,0,0,228,229,5,43,0,0,229,78,
		1,0,0,0,230,231,5,45,0,0,231,232,5,45,0,0,232,80,1,0,0,0,233,234,5,46,
		0,0,234,82,1,0,0,0,235,236,5,94,0,0,236,84,1,0,0,0,237,239,7,0,0,0,238,
		237,1,0,0,0,239,243,1,0,0,0,240,242,7,1,0,0,241,240,1,0,0,0,242,245,1,
		0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,86,1,0,0,0,245,243,1,0,0,0,246,
		252,5,34,0,0,247,251,8,2,0,0,248,249,5,92,0,0,249,251,7,3,0,0,250,247,
		1,0,0,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,
		0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,5,34,0,0,256,88,1,0,0,0,257,
		258,5,64,0,0,258,259,5,47,0,0,259,263,1,0,0,0,260,262,8,4,0,0,261,260,
		1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,
		0,265,263,1,0,0,0,266,267,7,4,0,0,267,90,1,0,0,0,268,270,5,45,0,0,269,
		268,1,0,0,0,269,270,1,0,0,0,270,289,1,0,0,0,271,273,7,5,0,0,272,271,1,
		0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,
		276,278,7,6,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,290,1,0,0,0,279,283,
		7,5,0,0,280,282,7,7,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,
		0,283,284,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,286,288,7,8,0,0,287,
		286,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,272,1,0,0,0,289,279,1,
		0,0,0,290,92,1,0,0,0,291,293,7,9,0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,
		292,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,6,46,0,0,297,94,1,
		0,0,0,298,299,5,47,0,0,299,300,5,42,0,0,300,304,1,0,0,0,301,303,9,0,0,
		0,302,301,1,0,0,0,303,306,1,0,0,0,304,305,1,0,0,0,304,302,1,0,0,0,305,
		307,1,0,0,0,306,304,1,0,0,0,307,308,5,42,0,0,308,309,5,47,0,0,309,310,
		1,0,0,0,310,311,6,47,0,0,311,96,1,0,0,0,312,313,5,47,0,0,313,314,5,47,
		0,0,314,318,1,0,0,0,315,317,8,4,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,
		316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,6,
		48,0,0,322,98,1,0,0,0,16,0,238,241,243,250,252,263,269,274,277,283,287,
		289,294,304,318,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
