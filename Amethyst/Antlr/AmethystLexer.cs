//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Interface=5, Macro=6, NoStack=7, 
		Inline=8, Semi=9, Colon=10, Comma=11, LParen=12, RParen=13, LSquareBrak=14, 
		RSquareBrak=15, LBrak=16, RBrak=17, Eq=18, Plus=19, Minus=20, Star=21, 
		Slash=22, Hash=23, EqEq=24, Neq=25, Gt=26, Gte=27, Lt=28, Lte=29, And=30, 
		AndAnd=31, OrOr=32, Dot=33, RawIdentifier=34, String=35, Command=36, Integer=37, 
		Whitespace=38, Comment=39, LineComment=40;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Hash", "EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", 
		"Dot", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "'interface'", "'macro'", 
		"'nostack'", "'inline'", "';'", "':'", "','", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'#'", "'=='", "'!='", 
		"'>'", "'>='", "'<'", "'<='", "'&'", "'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Hash", "EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", 
		"Dot", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,40,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,
		1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
		23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
		28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,3,33,195,8,33,
		1,33,5,33,198,8,33,10,33,12,33,201,9,33,1,34,1,34,1,34,1,34,5,34,207,8,
		34,10,34,12,34,210,9,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,218,8,35,10,
		35,12,35,221,9,35,1,35,1,35,1,36,3,36,226,8,36,1,36,4,36,229,8,36,11,36,
		12,36,230,1,36,3,36,234,8,36,1,36,1,36,5,36,238,8,36,10,36,12,36,241,9,
		36,1,36,3,36,244,8,36,3,36,246,8,36,1,37,4,37,249,8,37,11,37,12,37,250,
		1,37,1,37,1,38,1,38,1,38,1,38,5,38,259,8,38,10,38,12,38,262,9,38,1,38,
		1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,273,8,39,10,39,12,39,276,
		9,39,1,39,1,39,1,260,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
		69,35,71,36,73,37,75,38,77,39,79,40,1,0,10,3,0,65,90,95,95,97,122,5,0,
		45,45,47,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,34,34,92,
		92,2,0,10,10,13,13,1,0,48,57,8,0,66,66,73,73,76,76,83,83,98,98,105,105,
		108,108,115,115,2,0,46,46,48,57,4,0,68,68,70,70,100,100,102,102,3,0,9,
		10,13,13,32,32,291,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,91,1,0,0,0,5,94,1,0,0,
		0,7,99,1,0,0,0,9,106,1,0,0,0,11,116,1,0,0,0,13,122,1,0,0,0,15,130,1,0,
		0,0,17,137,1,0,0,0,19,139,1,0,0,0,21,141,1,0,0,0,23,143,1,0,0,0,25,145,
		1,0,0,0,27,147,1,0,0,0,29,149,1,0,0,0,31,151,1,0,0,0,33,153,1,0,0,0,35,
		155,1,0,0,0,37,157,1,0,0,0,39,159,1,0,0,0,41,161,1,0,0,0,43,163,1,0,0,
		0,45,165,1,0,0,0,47,167,1,0,0,0,49,170,1,0,0,0,51,173,1,0,0,0,53,175,1,
		0,0,0,55,178,1,0,0,0,57,180,1,0,0,0,59,183,1,0,0,0,61,185,1,0,0,0,63,188,
		1,0,0,0,65,191,1,0,0,0,67,194,1,0,0,0,69,202,1,0,0,0,71,213,1,0,0,0,73,
		225,1,0,0,0,75,248,1,0,0,0,77,254,1,0,0,0,79,268,1,0,0,0,81,82,5,110,0,
		0,82,83,5,97,0,0,83,84,5,109,0,0,84,85,5,101,0,0,85,86,5,115,0,0,86,87,
		5,112,0,0,87,88,5,97,0,0,88,89,5,99,0,0,89,90,5,101,0,0,90,2,1,0,0,0,91,
		92,5,105,0,0,92,93,5,102,0,0,93,4,1,0,0,0,94,95,5,101,0,0,95,96,5,108,
		0,0,96,97,5,115,0,0,97,98,5,101,0,0,98,6,1,0,0,0,99,100,5,114,0,0,100,
		101,5,101,0,0,101,102,5,116,0,0,102,103,5,117,0,0,103,104,5,114,0,0,104,
		105,5,110,0,0,105,8,1,0,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,109,
		5,116,0,0,109,110,5,101,0,0,110,111,5,114,0,0,111,112,5,102,0,0,112,113,
		5,97,0,0,113,114,5,99,0,0,114,115,5,101,0,0,115,10,1,0,0,0,116,117,5,109,
		0,0,117,118,5,97,0,0,118,119,5,99,0,0,119,120,5,114,0,0,120,121,5,111,
		0,0,121,12,1,0,0,0,122,123,5,110,0,0,123,124,5,111,0,0,124,125,5,115,0,
		0,125,126,5,116,0,0,126,127,5,97,0,0,127,128,5,99,0,0,128,129,5,107,0,
		0,129,14,1,0,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,133,5,108,0,0,
		133,134,5,105,0,0,134,135,5,110,0,0,135,136,5,101,0,0,136,16,1,0,0,0,137,
		138,5,59,0,0,138,18,1,0,0,0,139,140,5,58,0,0,140,20,1,0,0,0,141,142,5,
		44,0,0,142,22,1,0,0,0,143,144,5,40,0,0,144,24,1,0,0,0,145,146,5,41,0,0,
		146,26,1,0,0,0,147,148,5,91,0,0,148,28,1,0,0,0,149,150,5,93,0,0,150,30,
		1,0,0,0,151,152,5,123,0,0,152,32,1,0,0,0,153,154,5,125,0,0,154,34,1,0,
		0,0,155,156,5,61,0,0,156,36,1,0,0,0,157,158,5,43,0,0,158,38,1,0,0,0,159,
		160,5,45,0,0,160,40,1,0,0,0,161,162,5,42,0,0,162,42,1,0,0,0,163,164,5,
		47,0,0,164,44,1,0,0,0,165,166,5,35,0,0,166,46,1,0,0,0,167,168,5,61,0,0,
		168,169,5,61,0,0,169,48,1,0,0,0,170,171,5,33,0,0,171,172,5,61,0,0,172,
		50,1,0,0,0,173,174,5,62,0,0,174,52,1,0,0,0,175,176,5,62,0,0,176,177,5,
		61,0,0,177,54,1,0,0,0,178,179,5,60,0,0,179,56,1,0,0,0,180,181,5,60,0,0,
		181,182,5,61,0,0,182,58,1,0,0,0,183,184,5,38,0,0,184,60,1,0,0,0,185,186,
		5,38,0,0,186,187,5,38,0,0,187,62,1,0,0,0,188,189,5,124,0,0,189,190,5,124,
		0,0,190,64,1,0,0,0,191,192,5,46,0,0,192,66,1,0,0,0,193,195,7,0,0,0,194,
		193,1,0,0,0,195,199,1,0,0,0,196,198,7,1,0,0,197,196,1,0,0,0,198,201,1,
		0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,68,1,0,0,0,201,199,1,0,0,0,202,
		208,5,34,0,0,203,207,8,2,0,0,204,205,5,92,0,0,205,207,7,3,0,0,206,203,
		1,0,0,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,
		0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,34,0,0,212,70,1,0,0,0,213,
		214,5,64,0,0,214,215,5,47,0,0,215,219,1,0,0,0,216,218,8,4,0,0,217,216,
		1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,
		0,221,219,1,0,0,0,222,223,7,4,0,0,223,72,1,0,0,0,224,226,5,45,0,0,225,
		224,1,0,0,0,225,226,1,0,0,0,226,245,1,0,0,0,227,229,7,5,0,0,228,227,1,
		0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,
		232,234,7,6,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,246,1,0,0,0,235,239,
		7,5,0,0,236,238,7,7,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,
		0,239,240,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,242,244,7,8,0,0,243,
		242,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,228,1,0,0,0,245,235,1,
		0,0,0,246,74,1,0,0,0,247,249,7,9,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,
		248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,6,37,0,0,253,76,1,
		0,0,0,254,255,5,47,0,0,255,256,5,42,0,0,256,260,1,0,0,0,257,259,9,0,0,
		0,258,257,1,0,0,0,259,262,1,0,0,0,260,261,1,0,0,0,260,258,1,0,0,0,261,
		263,1,0,0,0,262,260,1,0,0,0,263,264,5,42,0,0,264,265,5,47,0,0,265,266,
		1,0,0,0,266,267,6,38,0,0,267,78,1,0,0,0,268,269,5,47,0,0,269,270,5,47,
		0,0,270,274,1,0,0,0,271,273,8,4,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,
		272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,6,
		39,0,0,278,80,1,0,0,0,16,0,194,197,199,206,208,219,225,230,233,239,243,
		245,250,260,274,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
