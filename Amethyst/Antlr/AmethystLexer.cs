//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, Semi=2, Comma=3, LParen=4, RParen=5, LBrak=6, RBrak=7, Eq=8, 
		Plus=9, Minus=10, Hash=11, Identifier=12, String=13, Command=14, Integer=15, 
		Whitespace=16, Comment=17, LineComment=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "Semi", "Comma", "LParen", "RParen", "LBrak", "RBrak", "Eq", 
		"Plus", "Minus", "Hash", "Identifier", "String", "Command", "Integer", 
		"Whitespace", "Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "';'", "','", "'('", "')'", "'{'", "'}'", "'='", 
		"'+'", "'-'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "Semi", "Comma", "LParen", "RParen", "LBrak", "RBrak", 
		"Eq", "Plus", "Minus", "Hash", "Identifier", "String", "Command", "Integer", 
		"Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,136,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
		9,1,9,1,10,1,10,1,11,3,11,69,8,11,1,11,5,11,72,8,11,10,11,12,11,75,9,11,
		1,12,1,12,1,12,1,12,5,12,81,8,12,10,12,12,12,84,9,12,1,12,1,12,1,13,1,
		13,5,13,90,8,13,10,13,12,13,93,9,13,1,13,1,13,1,14,3,14,98,8,14,1,14,4,
		14,101,8,14,11,14,12,14,102,1,15,4,15,106,8,15,11,15,12,15,107,1,15,1,
		15,1,16,1,16,1,16,1,16,5,16,116,8,16,10,16,12,16,119,9,16,1,16,1,16,1,
		16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,130,8,17,10,17,12,17,133,9,17,1,
		17,1,17,1,117,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,7,2,0,65,90,97,122,5,0,45,
		45,48,58,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,34,34,92,92,
		2,0,10,10,13,13,1,0,48,57,3,0,9,10,13,13,32,32,144,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,
		1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,
		0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,65,1,0,
		0,0,23,68,1,0,0,0,25,76,1,0,0,0,27,87,1,0,0,0,29,97,1,0,0,0,31,105,1,0,
		0,0,33,111,1,0,0,0,35,125,1,0,0,0,37,38,5,110,0,0,38,39,5,97,0,0,39,40,
		5,109,0,0,40,41,5,101,0,0,41,42,5,115,0,0,42,43,5,112,0,0,43,44,5,97,0,
		0,44,45,5,99,0,0,45,46,5,101,0,0,46,2,1,0,0,0,47,48,5,59,0,0,48,4,1,0,
		0,0,49,50,5,44,0,0,50,6,1,0,0,0,51,52,5,40,0,0,52,8,1,0,0,0,53,54,5,41,
		0,0,54,10,1,0,0,0,55,56,5,123,0,0,56,12,1,0,0,0,57,58,5,125,0,0,58,14,
		1,0,0,0,59,60,5,61,0,0,60,16,1,0,0,0,61,62,5,43,0,0,62,18,1,0,0,0,63,64,
		5,45,0,0,64,20,1,0,0,0,65,66,5,35,0,0,66,22,1,0,0,0,67,69,7,0,0,0,68,67,
		1,0,0,0,69,73,1,0,0,0,70,72,7,1,0,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,
		1,0,0,0,73,74,1,0,0,0,74,24,1,0,0,0,75,73,1,0,0,0,76,82,5,34,0,0,77,81,
		8,2,0,0,78,79,5,92,0,0,79,81,7,3,0,0,80,77,1,0,0,0,80,78,1,0,0,0,81,84,
		1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,
		5,34,0,0,86,26,1,0,0,0,87,91,5,47,0,0,88,90,8,4,0,0,89,88,1,0,0,0,90,93,
		1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,
		7,4,0,0,95,28,1,0,0,0,96,98,5,45,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,100,
		1,0,0,0,99,101,7,5,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,
		102,103,1,0,0,0,103,30,1,0,0,0,104,106,7,6,0,0,105,104,1,0,0,0,106,107,
		1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,6,15,0,
		0,110,32,1,0,0,0,111,112,5,47,0,0,112,113,5,42,0,0,113,117,1,0,0,0,114,
		116,9,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,118,1,0,0,0,117,115,1,
		0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,42,0,0,121,122,5,47,0,
		0,122,123,1,0,0,0,123,124,6,16,0,0,124,34,1,0,0,0,125,126,5,47,0,0,126,
		127,5,47,0,0,127,131,1,0,0,0,128,130,8,4,0,0,129,128,1,0,0,0,130,133,1,
		0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,
		134,135,6,17,0,0,135,36,1,0,0,0,12,0,68,71,73,80,82,91,97,102,107,117,
		131,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
