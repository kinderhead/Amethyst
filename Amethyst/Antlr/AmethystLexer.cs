//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Interface=5, Macro=6, NoStack=7, 
		Inline=8, Semi=9, Colon=10, Comma=11, LParen=12, RParen=13, LSquareBrak=14, 
		RSquareBrak=15, LBrak=16, RBrak=17, Eq=18, Plus=19, Minus=20, Star=21, 
		Slash=22, Not=23, PlusEq=24, MinusEq=25, StarEq=26, SlashEq=27, Hash=28, 
		EqEq=29, Neq=30, Gt=31, Gte=32, Lt=33, Lte=34, And=35, AndAnd=36, OrOr=37, 
		PlusPlus=38, MinusMinus=39, Dot=40, WeakRef=41, RawIdentifier=42, String=43, 
		Command=44, Integer=45, Whitespace=46, Comment=47, LineComment=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "'interface'", "'macro'", 
		"'nostack'", "'inline'", "';'", "':'", "','", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'!'", "'+='", "'-='", 
		"'*='", "'/='", "'#'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'&'", 
		"'&&'", "'||'", "'++'", "'--'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,
		27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,
		33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
		38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,3,41,233,8,41,1,41,5,41,236,8,41,
		10,41,12,41,239,9,41,1,42,1,42,1,42,1,42,5,42,245,8,42,10,42,12,42,248,
		9,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,256,8,43,10,43,12,43,259,9,43,
		1,43,1,43,1,44,3,44,264,8,44,1,44,4,44,267,8,44,11,44,12,44,268,1,44,3,
		44,272,8,44,1,44,1,44,5,44,276,8,44,10,44,12,44,279,9,44,1,44,3,44,282,
		8,44,3,44,284,8,44,1,45,4,45,287,8,45,11,45,12,45,288,1,45,1,45,1,46,1,
		46,1,46,1,46,5,46,297,8,46,10,46,12,46,300,9,46,1,46,1,46,1,46,1,46,1,
		46,1,47,1,47,1,47,1,47,5,47,311,8,47,10,47,12,47,314,9,47,1,47,1,47,1,
		298,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,1,
		0,10,3,0,65,90,95,95,97,122,5,0,45,45,47,57,65,90,95,95,97,122,4,0,10,
		10,13,13,34,34,92,92,2,0,34,34,92,92,2,0,10,10,13,13,1,0,48,57,8,0,66,
		66,73,73,76,76,83,83,98,98,105,105,108,108,115,115,2,0,46,46,48,57,4,0,
		68,68,70,70,100,100,102,102,3,0,9,10,13,13,32,32,329,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,107,1,0,0,0,5,110,1,0,
		0,0,7,115,1,0,0,0,9,122,1,0,0,0,11,132,1,0,0,0,13,138,1,0,0,0,15,146,1,
		0,0,0,17,153,1,0,0,0,19,155,1,0,0,0,21,157,1,0,0,0,23,159,1,0,0,0,25,161,
		1,0,0,0,27,163,1,0,0,0,29,165,1,0,0,0,31,167,1,0,0,0,33,169,1,0,0,0,35,
		171,1,0,0,0,37,173,1,0,0,0,39,175,1,0,0,0,41,177,1,0,0,0,43,179,1,0,0,
		0,45,181,1,0,0,0,47,183,1,0,0,0,49,186,1,0,0,0,51,189,1,0,0,0,53,192,1,
		0,0,0,55,195,1,0,0,0,57,197,1,0,0,0,59,200,1,0,0,0,61,203,1,0,0,0,63,205,
		1,0,0,0,65,208,1,0,0,0,67,210,1,0,0,0,69,213,1,0,0,0,71,215,1,0,0,0,73,
		218,1,0,0,0,75,221,1,0,0,0,77,224,1,0,0,0,79,227,1,0,0,0,81,229,1,0,0,
		0,83,232,1,0,0,0,85,240,1,0,0,0,87,251,1,0,0,0,89,263,1,0,0,0,91,286,1,
		0,0,0,93,292,1,0,0,0,95,306,1,0,0,0,97,98,5,110,0,0,98,99,5,97,0,0,99,
		100,5,109,0,0,100,101,5,101,0,0,101,102,5,115,0,0,102,103,5,112,0,0,103,
		104,5,97,0,0,104,105,5,99,0,0,105,106,5,101,0,0,106,2,1,0,0,0,107,108,
		5,105,0,0,108,109,5,102,0,0,109,4,1,0,0,0,110,111,5,101,0,0,111,112,5,
		108,0,0,112,113,5,115,0,0,113,114,5,101,0,0,114,6,1,0,0,0,115,116,5,114,
		0,0,116,117,5,101,0,0,117,118,5,116,0,0,118,119,5,117,0,0,119,120,5,114,
		0,0,120,121,5,110,0,0,121,8,1,0,0,0,122,123,5,105,0,0,123,124,5,110,0,
		0,124,125,5,116,0,0,125,126,5,101,0,0,126,127,5,114,0,0,127,128,5,102,
		0,0,128,129,5,97,0,0,129,130,5,99,0,0,130,131,5,101,0,0,131,10,1,0,0,0,
		132,133,5,109,0,0,133,134,5,97,0,0,134,135,5,99,0,0,135,136,5,114,0,0,
		136,137,5,111,0,0,137,12,1,0,0,0,138,139,5,110,0,0,139,140,5,111,0,0,140,
		141,5,115,0,0,141,142,5,116,0,0,142,143,5,97,0,0,143,144,5,99,0,0,144,
		145,5,107,0,0,145,14,1,0,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,149,
		5,108,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,101,0,0,152,16,
		1,0,0,0,153,154,5,59,0,0,154,18,1,0,0,0,155,156,5,58,0,0,156,20,1,0,0,
		0,157,158,5,44,0,0,158,22,1,0,0,0,159,160,5,40,0,0,160,24,1,0,0,0,161,
		162,5,41,0,0,162,26,1,0,0,0,163,164,5,91,0,0,164,28,1,0,0,0,165,166,5,
		93,0,0,166,30,1,0,0,0,167,168,5,123,0,0,168,32,1,0,0,0,169,170,5,125,0,
		0,170,34,1,0,0,0,171,172,5,61,0,0,172,36,1,0,0,0,173,174,5,43,0,0,174,
		38,1,0,0,0,175,176,5,45,0,0,176,40,1,0,0,0,177,178,5,42,0,0,178,42,1,0,
		0,0,179,180,5,47,0,0,180,44,1,0,0,0,181,182,5,33,0,0,182,46,1,0,0,0,183,
		184,5,43,0,0,184,185,5,61,0,0,185,48,1,0,0,0,186,187,5,45,0,0,187,188,
		5,61,0,0,188,50,1,0,0,0,189,190,5,42,0,0,190,191,5,61,0,0,191,52,1,0,0,
		0,192,193,5,47,0,0,193,194,5,61,0,0,194,54,1,0,0,0,195,196,5,35,0,0,196,
		56,1,0,0,0,197,198,5,61,0,0,198,199,5,61,0,0,199,58,1,0,0,0,200,201,5,
		33,0,0,201,202,5,61,0,0,202,60,1,0,0,0,203,204,5,62,0,0,204,62,1,0,0,0,
		205,206,5,62,0,0,206,207,5,61,0,0,207,64,1,0,0,0,208,209,5,60,0,0,209,
		66,1,0,0,0,210,211,5,60,0,0,211,212,5,61,0,0,212,68,1,0,0,0,213,214,5,
		38,0,0,214,70,1,0,0,0,215,216,5,38,0,0,216,217,5,38,0,0,217,72,1,0,0,0,
		218,219,5,124,0,0,219,220,5,124,0,0,220,74,1,0,0,0,221,222,5,43,0,0,222,
		223,5,43,0,0,223,76,1,0,0,0,224,225,5,45,0,0,225,226,5,45,0,0,226,78,1,
		0,0,0,227,228,5,46,0,0,228,80,1,0,0,0,229,230,5,94,0,0,230,82,1,0,0,0,
		231,233,7,0,0,0,232,231,1,0,0,0,233,237,1,0,0,0,234,236,7,1,0,0,235,234,
		1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,84,1,0,0,0,
		239,237,1,0,0,0,240,246,5,34,0,0,241,245,8,2,0,0,242,243,5,92,0,0,243,
		245,7,3,0,0,244,241,1,0,0,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,
		0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,34,0,0,
		250,86,1,0,0,0,251,252,5,64,0,0,252,253,5,47,0,0,253,257,1,0,0,0,254,256,
		8,4,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,
		0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,7,4,0,0,261,88,1,0,0,0,262,264,
		5,45,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,283,1,0,0,0,265,267,7,5,0,
		0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,
		271,1,0,0,0,270,272,7,6,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,284,1,
		0,0,0,273,277,7,5,0,0,274,276,7,7,0,0,275,274,1,0,0,0,276,279,1,0,0,0,
		277,275,1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,280,282,
		7,8,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,266,1,0,0,
		0,283,273,1,0,0,0,284,90,1,0,0,0,285,287,7,9,0,0,286,285,1,0,0,0,287,288,
		1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,6,45,0,
		0,291,92,1,0,0,0,292,293,5,47,0,0,293,294,5,42,0,0,294,298,1,0,0,0,295,
		297,9,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,299,1,0,0,0,298,296,1,
		0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,42,0,0,302,303,5,47,0,
		0,303,304,1,0,0,0,304,305,6,46,0,0,305,94,1,0,0,0,306,307,5,47,0,0,307,
		308,5,47,0,0,308,312,1,0,0,0,309,311,8,4,0,0,310,309,1,0,0,0,311,314,1,
		0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,
		315,316,6,47,0,0,316,96,1,0,0,0,16,0,232,235,237,244,246,257,263,268,271,
		277,281,283,288,298,312,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
