//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Semi=5, Comma=6, LParen=7, RParen=8, 
		LBrak=9, RBrak=10, Eq=11, Plus=12, Minus=13, Star=14, Slash=15, Hash=16, 
		EqEq=17, Neq=18, Gt=19, Gte=20, Lt=21, Lte=22, AndAnd=23, OrOr=24, Identifier=25, 
		String=26, Command=27, Integer=28, Whitespace=29, Comment=30, LineComment=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "Return", "Semi", "Comma", "LParen", "RParen", 
		"LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", "Hash", "EqEq", 
		"Neq", "Gt", "Gte", "Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", 
		"Command", "Integer", "Whitespace", "Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "';'", "','", "'('", 
		"')'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'#'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Semi", "Comma", "LParen", 
		"RParen", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", "Hash", 
		"EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "AndAnd", "OrOr", "Identifier", 
		"String", "Command", "Integer", "Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,205,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
		1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
		1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,3,24,
		136,8,24,1,24,5,24,139,8,24,10,24,12,24,142,9,24,1,25,1,25,1,25,1,25,5,
		25,148,8,25,10,25,12,25,151,9,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,159,
		8,26,10,26,12,26,162,9,26,1,26,1,26,1,27,3,27,167,8,27,1,27,4,27,170,8,
		27,11,27,12,27,171,1,28,4,28,175,8,28,11,28,12,28,176,1,28,1,28,1,29,1,
		29,1,29,1,29,5,29,185,8,29,10,29,12,29,188,9,29,1,29,1,29,1,29,1,29,1,
		29,1,30,1,30,1,30,1,30,5,30,199,8,30,10,30,12,30,202,9,30,1,30,1,30,1,
		186,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,7,2,0,65,90,97,122,5,0,45,45,
		48,58,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,2,0,34,34,92,92,2,
		0,10,10,13,13,1,0,48,57,3,0,9,10,13,13,32,32,213,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,73,1,0,0,0,5,76,1,0,0,0,7,81,1,0,0,
		0,9,88,1,0,0,0,11,90,1,0,0,0,13,92,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,
		19,98,1,0,0,0,21,100,1,0,0,0,23,102,1,0,0,0,25,104,1,0,0,0,27,106,1,0,
		0,0,29,108,1,0,0,0,31,110,1,0,0,0,33,112,1,0,0,0,35,115,1,0,0,0,37,118,
		1,0,0,0,39,120,1,0,0,0,41,123,1,0,0,0,43,125,1,0,0,0,45,128,1,0,0,0,47,
		131,1,0,0,0,49,135,1,0,0,0,51,143,1,0,0,0,53,154,1,0,0,0,55,166,1,0,0,
		0,57,174,1,0,0,0,59,180,1,0,0,0,61,194,1,0,0,0,63,64,5,110,0,0,64,65,5,
		97,0,0,65,66,5,109,0,0,66,67,5,101,0,0,67,68,5,115,0,0,68,69,5,112,0,0,
		69,70,5,97,0,0,70,71,5,99,0,0,71,72,5,101,0,0,72,2,1,0,0,0,73,74,5,105,
		0,0,74,75,5,102,0,0,75,4,1,0,0,0,76,77,5,101,0,0,77,78,5,108,0,0,78,79,
		5,115,0,0,79,80,5,101,0,0,80,6,1,0,0,0,81,82,5,114,0,0,82,83,5,101,0,0,
		83,84,5,116,0,0,84,85,5,117,0,0,85,86,5,114,0,0,86,87,5,110,0,0,87,8,1,
		0,0,0,88,89,5,59,0,0,89,10,1,0,0,0,90,91,5,44,0,0,91,12,1,0,0,0,92,93,
		5,40,0,0,93,14,1,0,0,0,94,95,5,41,0,0,95,16,1,0,0,0,96,97,5,123,0,0,97,
		18,1,0,0,0,98,99,5,125,0,0,99,20,1,0,0,0,100,101,5,61,0,0,101,22,1,0,0,
		0,102,103,5,43,0,0,103,24,1,0,0,0,104,105,5,45,0,0,105,26,1,0,0,0,106,
		107,5,42,0,0,107,28,1,0,0,0,108,109,5,47,0,0,109,30,1,0,0,0,110,111,5,
		35,0,0,111,32,1,0,0,0,112,113,5,61,0,0,113,114,5,61,0,0,114,34,1,0,0,0,
		115,116,5,33,0,0,116,117,5,61,0,0,117,36,1,0,0,0,118,119,5,62,0,0,119,
		38,1,0,0,0,120,121,5,62,0,0,121,122,5,61,0,0,122,40,1,0,0,0,123,124,5,
		60,0,0,124,42,1,0,0,0,125,126,5,60,0,0,126,127,5,61,0,0,127,44,1,0,0,0,
		128,129,5,38,0,0,129,130,5,38,0,0,130,46,1,0,0,0,131,132,5,124,0,0,132,
		133,5,124,0,0,133,48,1,0,0,0,134,136,7,0,0,0,135,134,1,0,0,0,136,140,1,
		0,0,0,137,139,7,1,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,
		140,141,1,0,0,0,141,50,1,0,0,0,142,140,1,0,0,0,143,149,5,34,0,0,144,148,
		8,2,0,0,145,146,5,92,0,0,146,148,7,3,0,0,147,144,1,0,0,0,147,145,1,0,0,
		0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,
		149,1,0,0,0,152,153,5,34,0,0,153,52,1,0,0,0,154,155,5,64,0,0,155,156,5,
		47,0,0,156,160,1,0,0,0,157,159,8,4,0,0,158,157,1,0,0,0,159,162,1,0,0,0,
		160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,
		7,4,0,0,164,54,1,0,0,0,165,167,5,45,0,0,166,165,1,0,0,0,166,167,1,0,0,
		0,167,169,1,0,0,0,168,170,7,5,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,
		169,1,0,0,0,171,172,1,0,0,0,172,56,1,0,0,0,173,175,7,6,0,0,174,173,1,0,
		0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,
		179,6,28,0,0,179,58,1,0,0,0,180,181,5,47,0,0,181,182,5,42,0,0,182,186,
		1,0,0,0,183,185,9,0,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,187,1,0,0,
		0,186,184,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,42,0,0,190,
		191,5,47,0,0,191,192,1,0,0,0,192,193,6,29,0,0,193,60,1,0,0,0,194,195,5,
		47,0,0,195,196,5,47,0,0,196,200,1,0,0,0,197,199,8,4,0,0,198,197,1,0,0,
		0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,
		200,1,0,0,0,203,204,6,30,0,0,204,62,1,0,0,0,12,0,135,138,140,147,149,160,
		166,171,176,186,200,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
