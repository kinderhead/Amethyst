//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Macro=5, NoStack=6, Semi=7, Comma=8, 
		LParen=9, RParen=10, LSquareBrak=11, RSquareBrak=12, LBrak=13, RBrak=14, 
		Eq=15, Plus=16, Minus=17, Star=18, Slash=19, Hash=20, EqEq=21, Neq=22, 
		Gt=23, Gte=24, Lt=25, Lte=26, AndAnd=27, OrOr=28, Identifier=29, String=30, 
		Command=31, Integer=32, Whitespace=33, Comment=34, LineComment=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "Return", "Macro", "NoStack", "Semi", "Comma", 
		"LParen", "RParen", "LSquareBrak", "RSquareBrak", "LBrak", "RBrak", "Eq", 
		"Plus", "Minus", "Star", "Slash", "Hash", "EqEq", "Neq", "Gt", "Gte", 
		"Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", "Command", "Integer", 
		"Whitespace", "Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "'macro'", "'nostack'", 
		"';'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+'", 
		"'-'", "'*'", "'/'", "'#'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
		"'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Macro", "NoStack", "Semi", 
		"Comma", "LParen", "RParen", "LSquareBrak", "RSquareBrak", "LBrak", "RBrak", 
		"Eq", "Plus", "Minus", "Star", "Slash", "Hash", "EqEq", "Neq", "Gt", "Gte", 
		"Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", "Command", "Integer", 
		"Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,
		1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,3,28,162,8,28,1,28,5,28,165,
		8,28,10,28,12,28,168,9,28,1,29,1,29,1,29,1,29,5,29,174,8,29,10,29,12,29,
		177,9,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,185,8,30,10,30,12,30,188,9,
		30,1,30,1,30,1,31,3,31,193,8,31,1,31,4,31,196,8,31,11,31,12,31,197,1,31,
		3,31,201,8,31,1,32,4,32,204,8,32,11,32,12,32,205,1,32,1,32,1,33,1,33,1,
		33,1,33,5,33,214,8,33,10,33,12,33,217,9,33,1,33,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,5,34,228,8,34,10,34,12,34,231,9,34,1,34,1,34,1,215,0,
		35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,8,3,0,65,
		90,95,95,97,122,5,0,45,45,47,58,65,90,95,95,97,122,4,0,10,10,13,13,34,
		34,92,92,2,0,34,34,92,92,2,0,10,10,13,13,2,0,46,46,48,57,12,0,66,66,68,
		68,70,70,73,73,76,76,83,83,98,98,100,100,102,102,105,105,108,108,115,115,
		3,0,9,10,13,13,32,32,243,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,81,1,0,0,
		0,5,84,1,0,0,0,7,89,1,0,0,0,9,96,1,0,0,0,11,102,1,0,0,0,13,110,1,0,0,0,
		15,112,1,0,0,0,17,114,1,0,0,0,19,116,1,0,0,0,21,118,1,0,0,0,23,120,1,0,
		0,0,25,122,1,0,0,0,27,124,1,0,0,0,29,126,1,0,0,0,31,128,1,0,0,0,33,130,
		1,0,0,0,35,132,1,0,0,0,37,134,1,0,0,0,39,136,1,0,0,0,41,138,1,0,0,0,43,
		141,1,0,0,0,45,144,1,0,0,0,47,146,1,0,0,0,49,149,1,0,0,0,51,151,1,0,0,
		0,53,154,1,0,0,0,55,157,1,0,0,0,57,161,1,0,0,0,59,169,1,0,0,0,61,180,1,
		0,0,0,63,192,1,0,0,0,65,203,1,0,0,0,67,209,1,0,0,0,69,223,1,0,0,0,71,72,
		5,110,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,75,5,101,0,0,75,76,5,115,0,
		0,76,77,5,112,0,0,77,78,5,97,0,0,78,79,5,99,0,0,79,80,5,101,0,0,80,2,1,
		0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,83,4,1,0,0,0,84,85,5,101,0,0,85,
		86,5,108,0,0,86,87,5,115,0,0,87,88,5,101,0,0,88,6,1,0,0,0,89,90,5,114,
		0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,93,5,117,0,0,93,94,5,114,0,0,94,
		95,5,110,0,0,95,8,1,0,0,0,96,97,5,109,0,0,97,98,5,97,0,0,98,99,5,99,0,
		0,99,100,5,114,0,0,100,101,5,111,0,0,101,10,1,0,0,0,102,103,5,110,0,0,
		103,104,5,111,0,0,104,105,5,115,0,0,105,106,5,116,0,0,106,107,5,97,0,0,
		107,108,5,99,0,0,108,109,5,107,0,0,109,12,1,0,0,0,110,111,5,59,0,0,111,
		14,1,0,0,0,112,113,5,44,0,0,113,16,1,0,0,0,114,115,5,40,0,0,115,18,1,0,
		0,0,116,117,5,41,0,0,117,20,1,0,0,0,118,119,5,91,0,0,119,22,1,0,0,0,120,
		121,5,93,0,0,121,24,1,0,0,0,122,123,5,123,0,0,123,26,1,0,0,0,124,125,5,
		125,0,0,125,28,1,0,0,0,126,127,5,61,0,0,127,30,1,0,0,0,128,129,5,43,0,
		0,129,32,1,0,0,0,130,131,5,45,0,0,131,34,1,0,0,0,132,133,5,42,0,0,133,
		36,1,0,0,0,134,135,5,47,0,0,135,38,1,0,0,0,136,137,5,35,0,0,137,40,1,0,
		0,0,138,139,5,61,0,0,139,140,5,61,0,0,140,42,1,0,0,0,141,142,5,33,0,0,
		142,143,5,61,0,0,143,44,1,0,0,0,144,145,5,62,0,0,145,46,1,0,0,0,146,147,
		5,62,0,0,147,148,5,61,0,0,148,48,1,0,0,0,149,150,5,60,0,0,150,50,1,0,0,
		0,151,152,5,60,0,0,152,153,5,61,0,0,153,52,1,0,0,0,154,155,5,38,0,0,155,
		156,5,38,0,0,156,54,1,0,0,0,157,158,5,124,0,0,158,159,5,124,0,0,159,56,
		1,0,0,0,160,162,7,0,0,0,161,160,1,0,0,0,162,166,1,0,0,0,163,165,7,1,0,
		0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,
		58,1,0,0,0,168,166,1,0,0,0,169,175,5,34,0,0,170,174,8,2,0,0,171,172,5,
		92,0,0,172,174,7,3,0,0,173,170,1,0,0,0,173,171,1,0,0,0,174,177,1,0,0,0,
		175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,
		5,34,0,0,179,60,1,0,0,0,180,181,5,64,0,0,181,182,5,47,0,0,182,186,1,0,
		0,0,183,185,8,4,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,
		187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,7,4,0,0,190,62,1,0,
		0,0,191,193,5,45,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,
		196,7,5,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,
		0,0,0,198,200,1,0,0,0,199,201,7,6,0,0,200,199,1,0,0,0,200,201,1,0,0,0,
		201,64,1,0,0,0,202,204,7,7,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
		1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,6,32,0,0,208,66,1,0,0,
		0,209,210,5,47,0,0,210,211,5,42,0,0,211,215,1,0,0,0,212,214,9,0,0,0,213,
		212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,0,0,0,216,218,1,
		0,0,0,217,215,1,0,0,0,218,219,5,42,0,0,219,220,5,47,0,0,220,221,1,0,0,
		0,221,222,6,33,0,0,222,68,1,0,0,0,223,224,5,47,0,0,224,225,5,47,0,0,225,
		229,1,0,0,0,226,228,8,4,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,
		0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,6,34,0,0,
		233,70,1,0,0,0,13,0,161,164,166,173,175,186,192,197,200,205,215,229,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
