//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Semi=4, Comma=5, LParen=6, RParen=7, LBrak=8, 
		RBrak=9, Eq=10, Plus=11, Minus=12, Star=13, Slash=14, Hash=15, EqEq=16, 
		Neq=17, Gt=18, Gte=19, Lt=20, Lte=21, AndAnd=22, OrOr=23, Identifier=24, 
		String=25, Command=26, Integer=27, Whitespace=28, Comment=29, LineComment=30;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Namespace", "If", "Else", "Semi", "Comma", "LParen", "RParen", "LBrak", 
		"RBrak", "Eq", "Plus", "Minus", "Star", "Slash", "Hash", "EqEq", "Neq", 
		"Gt", "Gte", "Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", "Command", 
		"Integer", "Whitespace", "Comment", "LineComment"
	};


	public AmethystLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AmethystLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "';'", "','", "'('", "')'", "'{'", 
		"'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'#'", "'=='", "'!='", "'>'", 
		"'>='", "'<'", "'<='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Semi", "Comma", "LParen", "RParen", 
		"LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", "Hash", "EqEq", 
		"Neq", "Gt", "Gte", "Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", 
		"Command", "Integer", "Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,30,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,
		1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
		1,21,1,22,1,22,1,22,1,23,3,23,127,8,23,1,23,5,23,130,8,23,10,23,12,23,
		133,9,23,1,24,1,24,1,24,1,24,5,24,139,8,24,10,24,12,24,142,9,24,1,24,1,
		24,1,25,1,25,1,25,1,25,5,25,150,8,25,10,25,12,25,153,9,25,1,25,1,25,1,
		26,3,26,158,8,26,1,26,4,26,161,8,26,11,26,12,26,162,1,27,4,27,166,8,27,
		11,27,12,27,167,1,27,1,27,1,28,1,28,1,28,1,28,5,28,176,8,28,10,28,12,28,
		179,9,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,190,8,29,10,
		29,12,29,193,9,29,1,29,1,29,1,177,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,2,
		0,65,90,97,122,5,0,45,45,48,58,65,90,95,95,97,122,4,0,10,10,13,13,34,34,
		92,92,2,0,34,34,92,92,2,0,10,10,13,13,1,0,48,57,3,0,9,10,13,13,32,32,204,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,71,1,0,0,0,5,74,1,0,0,0,7,79,
		1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,89,1,
		0,0,0,19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,
		0,0,0,29,101,1,0,0,0,31,103,1,0,0,0,33,106,1,0,0,0,35,109,1,0,0,0,37,111,
		1,0,0,0,39,114,1,0,0,0,41,116,1,0,0,0,43,119,1,0,0,0,45,122,1,0,0,0,47,
		126,1,0,0,0,49,134,1,0,0,0,51,145,1,0,0,0,53,157,1,0,0,0,55,165,1,0,0,
		0,57,171,1,0,0,0,59,185,1,0,0,0,61,62,5,110,0,0,62,63,5,97,0,0,63,64,5,
		109,0,0,64,65,5,101,0,0,65,66,5,115,0,0,66,67,5,112,0,0,67,68,5,97,0,0,
		68,69,5,99,0,0,69,70,5,101,0,0,70,2,1,0,0,0,71,72,5,105,0,0,72,73,5,102,
		0,0,73,4,1,0,0,0,74,75,5,101,0,0,75,76,5,108,0,0,76,77,5,115,0,0,77,78,
		5,101,0,0,78,6,1,0,0,0,79,80,5,59,0,0,80,8,1,0,0,0,81,82,5,44,0,0,82,10,
		1,0,0,0,83,84,5,40,0,0,84,12,1,0,0,0,85,86,5,41,0,0,86,14,1,0,0,0,87,88,
		5,123,0,0,88,16,1,0,0,0,89,90,5,125,0,0,90,18,1,0,0,0,91,92,5,61,0,0,92,
		20,1,0,0,0,93,94,5,43,0,0,94,22,1,0,0,0,95,96,5,45,0,0,96,24,1,0,0,0,97,
		98,5,42,0,0,98,26,1,0,0,0,99,100,5,47,0,0,100,28,1,0,0,0,101,102,5,35,
		0,0,102,30,1,0,0,0,103,104,5,61,0,0,104,105,5,61,0,0,105,32,1,0,0,0,106,
		107,5,33,0,0,107,108,5,61,0,0,108,34,1,0,0,0,109,110,5,62,0,0,110,36,1,
		0,0,0,111,112,5,62,0,0,112,113,5,61,0,0,113,38,1,0,0,0,114,115,5,60,0,
		0,115,40,1,0,0,0,116,117,5,60,0,0,117,118,5,61,0,0,118,42,1,0,0,0,119,
		120,5,38,0,0,120,121,5,38,0,0,121,44,1,0,0,0,122,123,5,124,0,0,123,124,
		5,124,0,0,124,46,1,0,0,0,125,127,7,0,0,0,126,125,1,0,0,0,127,131,1,0,0,
		0,128,130,7,1,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,
		132,1,0,0,0,132,48,1,0,0,0,133,131,1,0,0,0,134,140,5,34,0,0,135,139,8,
		2,0,0,136,137,5,92,0,0,137,139,7,3,0,0,138,135,1,0,0,0,138,136,1,0,0,0,
		139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,
		1,0,0,0,143,144,5,34,0,0,144,50,1,0,0,0,145,146,5,64,0,0,146,147,5,47,
		0,0,147,151,1,0,0,0,148,150,8,4,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,
		149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,7,
		4,0,0,155,52,1,0,0,0,156,158,5,45,0,0,157,156,1,0,0,0,157,158,1,0,0,0,
		158,160,1,0,0,0,159,161,7,5,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,
		1,0,0,0,162,163,1,0,0,0,163,54,1,0,0,0,164,166,7,6,0,0,165,164,1,0,0,0,
		166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,
		6,27,0,0,170,56,1,0,0,0,171,172,5,47,0,0,172,173,5,42,0,0,173,177,1,0,
		0,0,174,176,9,0,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,0,0,177,
		175,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,42,0,0,181,182,5,
		47,0,0,182,183,1,0,0,0,183,184,6,28,0,0,184,58,1,0,0,0,185,186,5,47,0,
		0,186,187,5,47,0,0,187,191,1,0,0,0,188,190,8,4,0,0,189,188,1,0,0,0,190,
		193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,191,1,
		0,0,0,194,195,6,29,0,0,195,60,1,0,0,0,12,0,126,129,131,138,140,151,157,
		162,167,177,191,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
