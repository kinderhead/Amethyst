//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, For=4, Return=5, Struct=6, Implements=7, Macro=8, 
		Inline=9, Virtual=10, Semi=11, Colon=12, Comma=13, LParen=14, RParen=15, 
		LSquareBrak=16, RSquareBrak=17, LBrak=18, RBrak=19, Eq=20, Plus=21, Minus=22, 
		Star=23, Slash=24, Not=25, PlusEq=26, MinusEq=27, StarEq=28, SlashEq=29, 
		Hash=30, EqEq=31, Neq=32, Gt=33, Gte=34, Lt=35, Lte=36, And=37, AndAnd=38, 
		OrOr=39, PlusPlus=40, MinusMinus=41, Dot=42, WeakRef=43, RawIdentifier=44, 
		String=45, Command=46, Integer=47, Whitespace=48, Comment=49, LineComment=50;
	public const int
		RULE_root = 0, RULE_namespace = 1, RULE_function = 2, RULE_functionTag = 3, 
		RULE_functionModifier = 4, RULE_block = 5, RULE_struct = 6, RULE_declaration = 7, 
		RULE_method = 8, RULE_methodModifier = 9, RULE_statement = 10, RULE_initAssignmentStatement = 11, 
		RULE_expressionStatement = 12, RULE_commandStatement = 13, RULE_ifStatement = 14, 
		RULE_forStatement = 15, RULE_returnStatement = 16, RULE_expression = 17, 
		RULE_assignmentExpression = 18, RULE_logicalExpression = 19, RULE_equalityExpression = 20, 
		RULE_relationalExpression = 21, RULE_additiveExpression = 22, RULE_multiplicativeExpression = 23, 
		RULE_castExpression = 24, RULE_unaryExpression = 25, RULE_postfixExpression = 26, 
		RULE_indexExpression = 27, RULE_propertyExpression = 28, RULE_primaryExpression = 29, 
		RULE_listLiteral = 30, RULE_compoundLiteral = 31, RULE_compoundKeyPair = 32, 
		RULE_paramList = 33, RULE_paramPair = 34, RULE_paramModifier = 35, RULE_expressionList = 36, 
		RULE_type = 37, RULE_id = 38;
	public static readonly string[] ruleNames = {
		"root", "namespace", "function", "functionTag", "functionModifier", "block", 
		"struct", "declaration", "method", "methodModifier", "statement", "initAssignmentStatement", 
		"expressionStatement", "commandStatement", "ifStatement", "forStatement", 
		"returnStatement", "expression", "assignmentExpression", "logicalExpression", 
		"equalityExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"castExpression", "unaryExpression", "postfixExpression", "indexExpression", 
		"propertyExpression", "primaryExpression", "listLiteral", "compoundLiteral", 
		"compoundKeyPair", "paramList", "paramPair", "paramModifier", "expressionList", 
		"type", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'for'", "'return'", "'struct'", 
		"'implements'", "'macro'", "'inline'", "'virtual'", "';'", "':'", "','", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", 
		"'/'", "'!'", "'+='", "'-='", "'*='", "'/='", "'#'", "'=='", "'!='", "'>'", 
		"'>='", "'<'", "'<='", "'&'", "'&&'", "'||'", "'++'", "'--'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "For", "Return", "Struct", "Implements", 
		"Macro", "Inline", "Virtual", "Semi", "Colon", "Comma", "LParen", "RParen", 
		"LSquareBrak", "RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", 
		"Star", "Slash", "Not", "PlusEq", "MinusEq", "StarEq", "SlashEq", "Hash", 
		"EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", "PlusPlus", 
		"MinusMinus", "Dot", "WeakRef", "RawIdentifier", "String", "Command", 
		"Integer", "Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AmethystParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AmethystParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AmethystParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext[] initAssignmentStatement() {
			return GetRuleContexts<InitAssignmentStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement(int i) {
			return GetRuleContext<InitAssignmentStatementContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17593259788866L) != 0)) {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 78;
					@namespace();
					}
					break;
				case 2:
					{
					State = 79;
					function();
					}
					break;
				case 3:
					{
					State = 80;
					@struct();
					}
					break;
				case 4:
					{
					{
					State = 81;
					initAssignmentStatement();
					State = 82;
					Match(Semi);
					}
					}
					break;
				case 5:
					{
					State = 84;
					Match(Semi);
					}
					break;
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(AmethystParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(AmethystParser.Semi, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(Namespace);
			State = 93;
			id();
			State = 94;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdContext name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext[] functionTag() {
			return GetRuleContexts<FunctionTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext functionTag(int i) {
			return GetRuleContext<FunctionTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hash) {
				{
				{
				State = 96;
				functionTag();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Inline) {
				{
				{
				State = 102;
				functionModifier();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			type(0);
			State = 109;
			_localctx.name = id();
			State = 110;
			paramList();
			State = 111;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(AmethystParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FunctionTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTagContext functionTag() {
		FunctionTagContext _localctx = new FunctionTagContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(Hash);
			State = 114;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(AmethystParser.Inline, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(Inline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(LBrak);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 267181363642420L) != 0)) {
				{
				{
				State = 119;
				statement();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(AmethystParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(AmethystParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(Struct);
			State = 128;
			id();
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Implements) {
				{
				State = 129;
				Match(Implements);
				State = 130;
				type(0);
				}
			}

			State = 133;
			Match(LBrak);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186045952L) != 0)) {
				{
				State = 136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 134;
					declaration();
					}
					break;
				case 2:
					{
					State = 135;
					method();
					}
					break;
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			type(0);
			State = 144;
			Match(RawIdentifier);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 145;
				Match(Eq);
				State = 146;
				expression();
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149;
				Match(Semi);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Semi );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AmethystParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 16, RULE_method);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Inline || _la==Virtual) {
					{
					{
					State = 154;
					methodModifier();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160;
				type(0);
				State = 161;
				Match(RawIdentifier);
				State = 162;
				paramList();
				State = 163;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Inline) {
					{
					{
					State = 165;
					functionModifier();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				Match(RawIdentifier);
				State = 172;
				paramList();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 173;
					Match(Colon);
					State = 174;
					expression();
					}
				}

				State = 177;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier() {
			return GetRuleContext<FunctionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(AmethystParser.Virtual, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodModifier);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Inline:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				functionModifier();
				}
				break;
			case Virtual:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(Virtual);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 185;
					initAssignmentStatement();
					}
					break;
				case 2:
					{
					State = 186;
					expressionStatement();
					}
					break;
				case 3:
					{
					State = 187;
					returnStatement();
					}
					break;
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 190;
					Match(Semi);
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Semi );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				commandStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 198;
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_initAssignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			type(0);
			State = 202;
			id();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 203;
				Match(Eq);
				State = 204;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Command() { return GetToken(AmethystParser.Command, 0); }
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_commandStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Command);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(AmethystParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(AmethystParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(If);
			State = 212;
			Match(LParen);
			State = 213;
			expression();
			State = 214;
			Match(RParen);
			State = 215;
			statement();
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 216;
				Match(Else);
				State = 217;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionContext cond;
		public ExpressionContext it;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(AmethystParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(For);
			State = 221;
			Match(LParen);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RawIdentifier) {
				{
				State = 222;
				initAssignmentStatement();
				}
			}

			State = 225;
			Match(Semi);
			State = 226;
			_localctx.cond = expression();
			State = 227;
			Match(Semi);
			State = 228;
			_localctx.it = expression();
			State = 229;
			Match(RParen);
			State = 230;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(AmethystParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(Return);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 196812619464704L) != 0)) {
				{
				State = 233;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusEq() { return GetToken(AmethystParser.PlusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusEq() { return GetToken(AmethystParser.MinusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarEq() { return GetToken(AmethystParser.StarEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SlashEq() { return GetToken(AmethystParser.SlashEq, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			logicalExpression();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1007681536L) != 0)) {
				{
				State = 239;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1007681536L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 240;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(AmethystParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(AmethystParser.AndAnd, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(AmethystParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(AmethystParser.OrOr, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			equalityExpression();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd || _la==OrOr) {
				{
				{
				State = 244;
				_la = TokenStream.LA(1);
				if ( !(_la==AndAnd || _la==OrOr) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 245;
				equalityExpression();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EqEq() { return GetTokens(AmethystParser.EqEq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqEq(int i) {
			return GetToken(AmethystParser.EqEq, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Neq() { return GetTokens(AmethystParser.Neq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq(int i) {
			return GetToken(AmethystParser.Neq, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			relationalExpression();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EqEq || _la==Neq) {
				{
				{
				State = 252;
				_la = TokenStream.LA(1);
				if ( !(_la==EqEq || _la==Neq) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 253;
				relationalExpression();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gt() { return GetTokens(AmethystParser.Gt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt(int i) {
			return GetToken(AmethystParser.Gt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gte() { return GetTokens(AmethystParser.Gte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gte(int i) {
			return GetToken(AmethystParser.Gte, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lt() { return GetTokens(AmethystParser.Lt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt(int i) {
			return GetToken(AmethystParser.Lt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lte() { return GetTokens(AmethystParser.Lte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lte(int i) {
			return GetToken(AmethystParser.Lte, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			additiveExpression();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) {
				{
				{
				State = 260;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 128849018880L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 261;
				additiveExpression();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(AmethystParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(AmethystParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			multiplicativeExpression();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269;
				multiplicativeExpression();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(AmethystParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(AmethystParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(AmethystParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(AmethystParser.Slash, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			castExpression();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star || _la==Slash) {
				{
				{
				State = 276;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Slash) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 277;
				castExpression();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_castExpression);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				Match(LParen);
				State = 285;
				type(0);
				State = 286;
				Match(RParen);
				State = 287;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(AmethystParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(AmethystParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(AmethystParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(AmethystParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Not() { return GetTokens(AmethystParser.Not); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not(int i) {
			return GetToken(AmethystParser.Not, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298572632064L) != 0)) {
				{
				{
				State = 291;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298572632064L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 297;
			postfixExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext[] propertyExpression() {
			return GetRuleContexts<PropertyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression(int i) {
			return GetRuleContext<PropertyExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			primaryExpression();
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046593024L) != 0)) {
				{
				State = 303;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LParen:
					{
					State = 300;
					expressionList();
					}
					break;
				case LSquareBrak:
					{
					State = 301;
					indexExpression();
					}
					break;
				case Dot:
					{
					State = 302;
					propertyExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(LSquareBrak);
			State = 309;
			expression();
			State = 310;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(AmethystParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_propertyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(Dot);
			State = 313;
			Match(RawIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(AmethystParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(AmethystParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundLiteralContext compoundLiteral() {
			return GetRuleContext<CompoundLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_primaryExpression);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RawIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				id();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316;
				Match(String);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317;
				Match(Integer);
				}
				break;
			case LSquareBrak:
				EnterOuterAlt(_localctx, 4);
				{
				State = 318;
				listLiteral();
				}
				break;
			case LBrak:
				EnterOuterAlt(_localctx, 5);
				{
				State = 319;
				compoundLiteral();
				}
				break;
			case LParen:
				EnterOuterAlt(_localctx, 6);
				{
				State = 320;
				Match(LParen);
				State = 321;
				expression();
				State = 322;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(LSquareBrak);
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 196812619464704L) != 0)) {
				{
				State = 327;
				expression();
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 328;
					Match(Comma);
					State = 329;
					expression();
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 337;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundKeyPairContext[] compoundKeyPair() {
			return GetRuleContexts<CompoundKeyPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundKeyPairContext compoundKeyPair(int i) {
			return GetRuleContext<CompoundKeyPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public CompoundLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundLiteralContext compoundLiteral() {
		CompoundLiteralContext _localctx = new CompoundLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_compoundLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(LBrak);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RawIdentifier) {
				{
				State = 340;
				compoundKeyPair();
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 341;
					Match(Comma);
					State = 342;
					compoundKeyPair();
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 350;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundKeyPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AmethystParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundKeyPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundKeyPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundKeyPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundKeyPairContext compoundKeyPair() {
		CompoundKeyPairContext _localctx = new CompoundKeyPairContext(Context, State);
		EnterRule(_localctx, 64, RULE_compoundKeyPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(RawIdentifier);
			State = 353;
			Match(Colon);
			State = 354;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext[] paramPair() {
			return GetRuleContexts<ParamPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext paramPair(int i) {
			return GetRuleContext<ParamPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 66, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(LParen);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Macro || _la==RawIdentifier) {
				{
				State = 357;
				paramPair();
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 358;
					Match(Comma);
					State = 359;
					paramPair();
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 367;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext[] paramModifier() {
			return GetRuleContexts<ParamModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext paramModifier(int i) {
			return GetRuleContext<ParamModifierContext>(i);
		}
		public ParamPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamPairContext paramPair() {
		ParamPairContext _localctx = new ParamPairContext(Context, State);
		EnterRule(_localctx, 68, RULE_paramPair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Macro) {
				{
				{
				State = 369;
				paramModifier();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 375;
			type(0);
			State = 376;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Macro() { return GetToken(AmethystParser.Macro, 0); }
		public ParamModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamModifierContext paramModifier() {
		ParamModifierContext _localctx = new ParamModifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_paramModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(Macro);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 72, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(LParen);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 196812619464704L) != 0)) {
				{
				State = 381;
				expression();
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 382;
					Match(Comma);
					State = 383;
					expression();
					}
					}
					State = 388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 391;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(AmethystParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WeakRef() { return GetToken(AmethystParser.WeakRef, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 394;
			id();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 405;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 403;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 396;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 397;
						Match(LSquareBrak);
						State = 398;
						Match(RSquareBrak);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 399;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 400;
						Match(And);
						}
						break;
					case 3:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 401;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 402;
						Match(WeakRef);
						}
						break;
					}
					} 
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RawIdentifier() { return GetTokens(AmethystParser.RawIdentifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier(int i) {
			return GetToken(AmethystParser.RawIdentifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AmethystParser.Colon, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 76, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(RawIdentifier);
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 409;
				Match(Colon);
				State = 410;
				Match(RawIdentifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 37: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,414,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,86,8,0,10,
		0,12,0,89,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,98,8,2,10,2,12,2,101,9,2,
		1,2,5,2,104,8,2,10,2,12,2,107,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,
		1,4,1,5,1,5,5,5,121,8,5,10,5,12,5,124,9,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,
		132,8,6,1,6,1,6,1,6,5,6,137,8,6,10,6,12,6,140,9,6,1,6,1,6,1,7,1,7,1,7,
		1,7,3,7,148,8,7,1,7,4,7,151,8,7,11,7,12,7,152,1,8,5,8,156,8,8,10,8,12,
		8,159,9,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,167,8,8,10,8,12,8,170,9,8,1,8,1,
		8,1,8,1,8,3,8,176,8,8,1,8,1,8,3,8,180,8,8,1,9,1,9,3,9,184,8,9,1,10,1,10,
		1,10,3,10,189,8,10,1,10,4,10,192,8,10,11,10,12,10,193,1,10,1,10,1,10,1,
		10,3,10,200,8,10,1,11,1,11,1,11,1,11,3,11,206,8,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,219,8,14,1,15,1,15,1,15,3,15,224,
		8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,235,8,16,1,17,1,
		17,1,18,1,18,1,18,3,18,242,8,18,1,19,1,19,1,19,5,19,247,8,19,10,19,12,
		19,250,9,19,1,20,1,20,1,20,5,20,255,8,20,10,20,12,20,258,9,20,1,21,1,21,
		1,21,5,21,263,8,21,10,21,12,21,266,9,21,1,22,1,22,1,22,5,22,271,8,22,10,
		22,12,22,274,9,22,1,23,1,23,1,23,5,23,279,8,23,10,23,12,23,282,9,23,1,
		24,1,24,1,24,1,24,1,24,1,24,3,24,290,8,24,1,25,5,25,293,8,25,10,25,12,
		25,296,9,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,304,8,26,10,26,12,26,307,
		9,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,3,29,325,8,29,1,30,1,30,1,30,1,30,5,30,331,8,30,10,30,12,
		30,334,9,30,3,30,336,8,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,344,8,31,
		10,31,12,31,347,9,31,3,31,349,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,
		1,33,1,33,1,33,5,33,361,8,33,10,33,12,33,364,9,33,3,33,366,8,33,1,33,1,
		33,1,34,5,34,371,8,34,10,34,12,34,374,9,34,1,34,1,34,1,34,1,35,1,35,1,
		36,1,36,1,36,1,36,5,36,385,8,36,10,36,12,36,388,9,36,3,36,390,8,36,1,36,
		1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,404,8,37,10,
		37,12,37,407,9,37,1,38,1,38,1,38,3,38,412,8,38,1,38,0,1,74,39,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,0,7,2,0,20,20,26,29,1,0,38,39,1,0,31,
		32,1,0,33,36,1,0,21,22,1,0,23,24,3,0,22,22,25,25,40,41,432,0,87,1,0,0,
		0,2,92,1,0,0,0,4,99,1,0,0,0,6,113,1,0,0,0,8,116,1,0,0,0,10,118,1,0,0,0,
		12,127,1,0,0,0,14,143,1,0,0,0,16,179,1,0,0,0,18,183,1,0,0,0,20,199,1,0,
		0,0,22,201,1,0,0,0,24,207,1,0,0,0,26,209,1,0,0,0,28,211,1,0,0,0,30,220,
		1,0,0,0,32,232,1,0,0,0,34,236,1,0,0,0,36,238,1,0,0,0,38,243,1,0,0,0,40,
		251,1,0,0,0,42,259,1,0,0,0,44,267,1,0,0,0,46,275,1,0,0,0,48,289,1,0,0,
		0,50,294,1,0,0,0,52,299,1,0,0,0,54,308,1,0,0,0,56,312,1,0,0,0,58,324,1,
		0,0,0,60,326,1,0,0,0,62,339,1,0,0,0,64,352,1,0,0,0,66,356,1,0,0,0,68,372,
		1,0,0,0,70,378,1,0,0,0,72,380,1,0,0,0,74,393,1,0,0,0,76,408,1,0,0,0,78,
		86,3,2,1,0,79,86,3,4,2,0,80,86,3,12,6,0,81,82,3,22,11,0,82,83,5,11,0,0,
		83,86,1,0,0,0,84,86,5,11,0,0,85,78,1,0,0,0,85,79,1,0,0,0,85,80,1,0,0,0,
		85,81,1,0,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,
		88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,0,0,1,91,1,1,0,0,0,92,93,5,1,0,0,93,
		94,3,76,38,0,94,95,5,11,0,0,95,3,1,0,0,0,96,98,3,6,3,0,97,96,1,0,0,0,98,
		101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,105,1,0,0,0,101,99,1,0,0,
		0,102,104,3,8,4,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,
		106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,3,74,37,0,109,110,
		3,76,38,0,110,111,3,66,33,0,111,112,3,10,5,0,112,5,1,0,0,0,113,114,5,30,
		0,0,114,115,3,76,38,0,115,7,1,0,0,0,116,117,5,9,0,0,117,9,1,0,0,0,118,
		122,5,18,0,0,119,121,3,20,10,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,
		1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,19,0,
		0,126,11,1,0,0,0,127,128,5,6,0,0,128,131,3,76,38,0,129,130,5,7,0,0,130,
		132,3,74,37,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,138,
		5,18,0,0,134,137,3,14,7,0,135,137,3,16,8,0,136,134,1,0,0,0,136,135,1,0,
		0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,
		138,1,0,0,0,141,142,5,19,0,0,142,13,1,0,0,0,143,144,3,74,37,0,144,147,
		5,44,0,0,145,146,5,20,0,0,146,148,3,34,17,0,147,145,1,0,0,0,147,148,1,
		0,0,0,148,150,1,0,0,0,149,151,5,11,0,0,150,149,1,0,0,0,151,152,1,0,0,0,
		152,150,1,0,0,0,152,153,1,0,0,0,153,15,1,0,0,0,154,156,3,18,9,0,155,154,
		1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,
		0,159,157,1,0,0,0,160,161,3,74,37,0,161,162,5,44,0,0,162,163,3,66,33,0,
		163,164,3,10,5,0,164,180,1,0,0,0,165,167,3,8,4,0,166,165,1,0,0,0,167,170,
		1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,
		0,171,172,5,44,0,0,172,175,3,66,33,0,173,174,5,12,0,0,174,176,3,34,17,
		0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,3,10,5,0,178,
		180,1,0,0,0,179,157,1,0,0,0,179,168,1,0,0,0,180,17,1,0,0,0,181,184,3,8,
		4,0,182,184,5,10,0,0,183,181,1,0,0,0,183,182,1,0,0,0,184,19,1,0,0,0,185,
		189,3,22,11,0,186,189,3,24,12,0,187,189,3,32,16,0,188,185,1,0,0,0,188,
		186,1,0,0,0,188,187,1,0,0,0,189,191,1,0,0,0,190,192,5,11,0,0,191,190,1,
		0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,200,1,0,0,0,
		195,200,3,26,13,0,196,200,3,10,5,0,197,200,3,28,14,0,198,200,3,30,15,0,
		199,188,1,0,0,0,199,195,1,0,0,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,
		1,0,0,0,200,21,1,0,0,0,201,202,3,74,37,0,202,205,3,76,38,0,203,204,5,20,
		0,0,204,206,3,34,17,0,205,203,1,0,0,0,205,206,1,0,0,0,206,23,1,0,0,0,207,
		208,3,34,17,0,208,25,1,0,0,0,209,210,5,46,0,0,210,27,1,0,0,0,211,212,5,
		2,0,0,212,213,5,14,0,0,213,214,3,34,17,0,214,215,5,15,0,0,215,218,3,20,
		10,0,216,217,5,3,0,0,217,219,3,20,10,0,218,216,1,0,0,0,218,219,1,0,0,0,
		219,29,1,0,0,0,220,221,5,4,0,0,221,223,5,14,0,0,222,224,3,22,11,0,223,
		222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,11,0,0,226,227,3,
		34,17,0,227,228,5,11,0,0,228,229,3,34,17,0,229,230,5,15,0,0,230,231,3,
		20,10,0,231,31,1,0,0,0,232,234,5,5,0,0,233,235,3,34,17,0,234,233,1,0,0,
		0,234,235,1,0,0,0,235,33,1,0,0,0,236,237,3,36,18,0,237,35,1,0,0,0,238,
		241,3,38,19,0,239,240,7,0,0,0,240,242,3,34,17,0,241,239,1,0,0,0,241,242,
		1,0,0,0,242,37,1,0,0,0,243,248,3,40,20,0,244,245,7,1,0,0,245,247,3,40,
		20,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,
		39,1,0,0,0,250,248,1,0,0,0,251,256,3,42,21,0,252,253,7,2,0,0,253,255,3,
		42,21,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,
		0,257,41,1,0,0,0,258,256,1,0,0,0,259,264,3,44,22,0,260,261,7,3,0,0,261,
		263,3,44,22,0,262,260,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
		1,0,0,0,265,43,1,0,0,0,266,264,1,0,0,0,267,272,3,46,23,0,268,269,7,4,0,
		0,269,271,3,46,23,0,270,268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,
		273,1,0,0,0,273,45,1,0,0,0,274,272,1,0,0,0,275,280,3,48,24,0,276,277,7,
		5,0,0,277,279,3,48,24,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,
		0,280,281,1,0,0,0,281,47,1,0,0,0,282,280,1,0,0,0,283,290,3,50,25,0,284,
		285,5,14,0,0,285,286,3,74,37,0,286,287,5,15,0,0,287,288,3,48,24,0,288,
		290,1,0,0,0,289,283,1,0,0,0,289,284,1,0,0,0,290,49,1,0,0,0,291,293,7,6,
		0,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,
		297,1,0,0,0,296,294,1,0,0,0,297,298,3,52,26,0,298,51,1,0,0,0,299,305,3,
		58,29,0,300,304,3,72,36,0,301,304,3,54,27,0,302,304,3,56,28,0,303,300,
		1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,
		0,305,306,1,0,0,0,306,53,1,0,0,0,307,305,1,0,0,0,308,309,5,16,0,0,309,
		310,3,34,17,0,310,311,5,17,0,0,311,55,1,0,0,0,312,313,5,42,0,0,313,314,
		5,44,0,0,314,57,1,0,0,0,315,325,3,76,38,0,316,325,5,45,0,0,317,325,5,47,
		0,0,318,325,3,60,30,0,319,325,3,62,31,0,320,321,5,14,0,0,321,322,3,34,
		17,0,322,323,5,15,0,0,323,325,1,0,0,0,324,315,1,0,0,0,324,316,1,0,0,0,
		324,317,1,0,0,0,324,318,1,0,0,0,324,319,1,0,0,0,324,320,1,0,0,0,325,59,
		1,0,0,0,326,335,5,16,0,0,327,332,3,34,17,0,328,329,5,13,0,0,329,331,3,
		34,17,0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,
		0,333,336,1,0,0,0,334,332,1,0,0,0,335,327,1,0,0,0,335,336,1,0,0,0,336,
		337,1,0,0,0,337,338,5,17,0,0,338,61,1,0,0,0,339,348,5,18,0,0,340,345,3,
		64,32,0,341,342,5,13,0,0,342,344,3,64,32,0,343,341,1,0,0,0,344,347,1,0,
		0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,
		340,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,5,19,0,0,351,63,1,
		0,0,0,352,353,5,44,0,0,353,354,5,12,0,0,354,355,3,34,17,0,355,65,1,0,0,
		0,356,365,5,14,0,0,357,362,3,68,34,0,358,359,5,13,0,0,359,361,3,68,34,
		0,360,358,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,
		366,1,0,0,0,364,362,1,0,0,0,365,357,1,0,0,0,365,366,1,0,0,0,366,367,1,
		0,0,0,367,368,5,15,0,0,368,67,1,0,0,0,369,371,3,70,35,0,370,369,1,0,0,
		0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,
		372,1,0,0,0,375,376,3,74,37,0,376,377,3,76,38,0,377,69,1,0,0,0,378,379,
		5,8,0,0,379,71,1,0,0,0,380,389,5,14,0,0,381,386,3,34,17,0,382,383,5,13,
		0,0,383,385,3,34,17,0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,
		386,387,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,389,381,1,0,0,0,389,390,
		1,0,0,0,390,391,1,0,0,0,391,392,5,15,0,0,392,73,1,0,0,0,393,394,6,37,-1,
		0,394,395,3,76,38,0,395,405,1,0,0,0,396,397,10,3,0,0,397,398,5,16,0,0,
		398,404,5,17,0,0,399,400,10,2,0,0,400,404,5,37,0,0,401,402,10,1,0,0,402,
		404,5,43,0,0,403,396,1,0,0,0,403,399,1,0,0,0,403,401,1,0,0,0,404,407,1,
		0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,75,1,0,0,0,407,405,1,0,0,0,408,
		411,5,44,0,0,409,410,5,12,0,0,410,412,5,44,0,0,411,409,1,0,0,0,411,412,
		1,0,0,0,412,77,1,0,0,0,45,85,87,99,105,122,131,136,138,147,152,157,168,
		175,179,183,188,193,199,205,218,223,234,241,248,256,264,272,280,289,294,
		303,305,324,332,335,345,348,362,365,372,386,389,403,405,411
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
