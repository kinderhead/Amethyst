//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Interface=5, Macro=6, NoStack=7, 
		Inline=8, Semi=9, Colon=10, Comma=11, LParen=12, RParen=13, LSquareBrak=14, 
		RSquareBrak=15, LBrak=16, RBrak=17, Eq=18, Plus=19, Minus=20, Star=21, 
		Slash=22, Hash=23, EqEq=24, Neq=25, Gt=26, Gte=27, Lt=28, Lte=29, And=30, 
		AndAnd=31, OrOr=32, Dot=33, WeakRef=34, RawIdentifier=35, String=36, Command=37, 
		Integer=38, Whitespace=39, Comment=40, LineComment=41;
	public const int
		RULE_root = 0, RULE_namespace = 1, RULE_function = 2, RULE_functionTag = 3, 
		RULE_functionModifier = 4, RULE_block = 5, RULE_interface = 6, RULE_declaration = 7, 
		RULE_statement = 8, RULE_initAssignmentStatement = 9, RULE_expressionStatement = 10, 
		RULE_commandStatement = 11, RULE_ifStatement = 12, RULE_returnStatement = 13, 
		RULE_expression = 14, RULE_assignmentExpression = 15, RULE_logicalExpression = 16, 
		RULE_equalityExpression = 17, RULE_relationalExpression = 18, RULE_additiveExpression = 19, 
		RULE_multiplicativeExpression = 20, RULE_unaryExpression = 21, RULE_postfixExpression = 22, 
		RULE_indexExpression = 23, RULE_propertyExpression = 24, RULE_primaryExpression = 25, 
		RULE_listLiteral = 26, RULE_compoundLiteral = 27, RULE_compoundKeyPair = 28, 
		RULE_paramList = 29, RULE_paramPair = 30, RULE_paramModifier = 31, RULE_expressionList = 32, 
		RULE_type = 33, RULE_id = 34;
	public static readonly string[] ruleNames = {
		"root", "namespace", "function", "functionTag", "functionModifier", "block", 
		"interface", "declaration", "statement", "initAssignmentStatement", "expressionStatement", 
		"commandStatement", "ifStatement", "returnStatement", "expression", "assignmentExpression", 
		"logicalExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "postfixExpression", "indexExpression", 
		"propertyExpression", "primaryExpression", "listLiteral", "compoundLiteral", 
		"compoundKeyPair", "paramList", "paramPair", "paramModifier", "expressionList", 
		"type", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "'interface'", "'macro'", 
		"'nostack'", "'inline'", "';'", "':'", "','", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'#'", "'=='", "'!='", 
		"'>'", "'>='", "'<'", "'<='", "'&'", "'&&'", "'||'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Interface", "Macro", "NoStack", 
		"Inline", "Semi", "Colon", "Comma", "LParen", "RParen", "LSquareBrak", 
		"RSquareBrak", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", 
		"Hash", "EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "And", "AndAnd", "OrOr", 
		"Dot", "WeakRef", "RawIdentifier", "String", "Command", "Integer", "Whitespace", 
		"Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AmethystParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AmethystParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AmethystParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext[] initAssignmentStatement() {
			return GetRuleContexts<InitAssignmentStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement(int i) {
			return GetRuleContext<InitAssignmentStatementContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34368127906L) != 0)) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 70;
					@namespace();
					}
					break;
				case 2:
					{
					State = 71;
					function();
					}
					break;
				case 3:
					{
					State = 72;
					@interface();
					}
					break;
				case 4:
					{
					{
					State = 73;
					initAssignmentStatement();
					State = 74;
					Match(Semi);
					}
					}
					break;
				case 5:
					{
					State = 76;
					Match(Semi);
					}
					break;
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(AmethystParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(AmethystParser.Semi, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(Namespace);
			State = 85;
			id();
			State = 86;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdContext name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext[] functionTag() {
			return GetRuleContexts<FunctionTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext functionTag(int i) {
			return GetRuleContext<FunctionTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hash) {
				{
				{
				State = 88;
				functionTag();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NoStack || _la==Inline) {
				{
				{
				State = 94;
				functionModifier();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			type(0);
			State = 101;
			_localctx.name = id();
			State = 102;
			paramList();
			State = 103;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(AmethystParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FunctionTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTagContext functionTag() {
		FunctionTagContext _localctx = new FunctionTagContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(Hash);
			State = 106;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoStack() { return GetToken(AmethystParser.NoStack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(AmethystParser.Inline, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !(_la==NoStack || _la==Inline) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(LBrak);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 515396161556L) != 0)) {
				{
				{
				State = 111;
				statement();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(AmethystParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 12, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(Interface);
			State = 120;
			id();
			State = 121;
			Match(LBrak);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RawIdentifier) {
				{
				{
				State = 122;
				declaration();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			type(0);
			State = 131;
			Match(RawIdentifier);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 132;
				Match(Semi);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Semi );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 137;
					initAssignmentStatement();
					}
					break;
				case 2:
					{
					State = 138;
					expressionStatement();
					}
					break;
				case 3:
					{
					State = 139;
					returnStatement();
					}
					break;
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 142;
					Match(Semi);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Semi );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				commandStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_initAssignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			type(0);
			State = 153;
			id();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 154;
				Match(Eq);
				State = 155;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Command() { return GetToken(AmethystParser.Command, 0); }
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_commandStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(Command);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(AmethystParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(AmethystParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(If);
			State = 163;
			Match(LParen);
			State = 164;
			expression();
			State = 165;
			Match(RParen);
			State = 166;
			statement();
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 167;
				Match(Else);
				State = 168;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(AmethystParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(Return);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 377957208064L) != 0)) {
				{
				State = 172;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			logicalExpression();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 178;
				Match(Eq);
				State = 179;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(AmethystParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(AmethystParser.AndAnd, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(AmethystParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(AmethystParser.OrOr, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			equalityExpression();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd || _la==OrOr) {
				{
				{
				State = 183;
				_la = TokenStream.LA(1);
				if ( !(_la==AndAnd || _la==OrOr) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 184;
				equalityExpression();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EqEq() { return GetTokens(AmethystParser.EqEq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqEq(int i) {
			return GetToken(AmethystParser.EqEq, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Neq() { return GetTokens(AmethystParser.Neq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq(int i) {
			return GetToken(AmethystParser.Neq, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			relationalExpression();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EqEq || _la==Neq) {
				{
				{
				State = 191;
				_la = TokenStream.LA(1);
				if ( !(_la==EqEq || _la==Neq) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 192;
				relationalExpression();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gt() { return GetTokens(AmethystParser.Gt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt(int i) {
			return GetToken(AmethystParser.Gt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gte() { return GetTokens(AmethystParser.Gte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gte(int i) {
			return GetToken(AmethystParser.Gte, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lt() { return GetTokens(AmethystParser.Lt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt(int i) {
			return GetToken(AmethystParser.Lt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lte() { return GetTokens(AmethystParser.Lte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lte(int i) {
			return GetToken(AmethystParser.Lte, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			additiveExpression();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) {
				{
				{
				State = 199;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 200;
				additiveExpression();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(AmethystParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(AmethystParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			multiplicativeExpression();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 207;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 208;
				multiplicativeExpression();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(AmethystParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(AmethystParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(AmethystParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(AmethystParser.Slash, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			unaryExpression();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star || _la==Slash) {
				{
				{
				State = 215;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Slash) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 216;
				unaryExpression();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			postfixExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext[] propertyExpression() {
			return GetRuleContexts<PropertyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression(int i) {
			return GetRuleContext<PropertyExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			primaryExpression();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8589955072L) != 0)) {
				{
				State = 228;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LParen:
					{
					State = 225;
					expressionList();
					}
					break;
				case LSquareBrak:
					{
					State = 226;
					indexExpression();
					}
					break;
				case Dot:
					{
					State = 227;
					propertyExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LSquareBrak);
			State = 234;
			expression();
			State = 235;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(AmethystParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_propertyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(Dot);
			State = 238;
			Match(RawIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(AmethystParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(AmethystParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundLiteralContext compoundLiteral() {
			return GetRuleContext<CompoundLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_primaryExpression);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RawIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				id();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(String);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				Match(Integer);
				}
				break;
			case LSquareBrak:
				EnterOuterAlt(_localctx, 4);
				{
				State = 243;
				listLiteral();
				}
				break;
			case LBrak:
				EnterOuterAlt(_localctx, 5);
				{
				State = 244;
				compoundLiteral();
				}
				break;
			case LParen:
				EnterOuterAlt(_localctx, 6);
				{
				State = 245;
				Match(LParen);
				State = 246;
				expression();
				State = 247;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(LSquareBrak);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 377957208064L) != 0)) {
				{
				State = 252;
				expression();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 253;
					Match(Comma);
					State = 254;
					expression();
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 262;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundKeyPairContext[] compoundKeyPair() {
			return GetRuleContexts<CompoundKeyPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundKeyPairContext compoundKeyPair(int i) {
			return GetRuleContext<CompoundKeyPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public CompoundLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundLiteralContext compoundLiteral() {
		CompoundLiteralContext _localctx = new CompoundLiteralContext(Context, State);
		EnterRule(_localctx, 54, RULE_compoundLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(LBrak);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RawIdentifier) {
				{
				State = 265;
				compoundKeyPair();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 266;
					Match(Comma);
					State = 267;
					compoundKeyPair();
					}
					}
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 275;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundKeyPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier() { return GetToken(AmethystParser.RawIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AmethystParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundKeyPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundKeyPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundKeyPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundKeyPairContext compoundKeyPair() {
		CompoundKeyPairContext _localctx = new CompoundKeyPairContext(Context, State);
		EnterRule(_localctx, 56, RULE_compoundKeyPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(RawIdentifier);
			State = 278;
			Match(Colon);
			State = 279;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext[] paramPair() {
			return GetRuleContexts<ParamPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext paramPair(int i) {
			return GetRuleContext<ParamPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 58, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(LParen);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Macro || _la==RawIdentifier) {
				{
				State = 282;
				paramPair();
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 283;
					Match(Comma);
					State = 284;
					paramPair();
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 292;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext[] paramModifier() {
			return GetRuleContexts<ParamModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext paramModifier(int i) {
			return GetRuleContext<ParamModifierContext>(i);
		}
		public ParamPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamPairContext paramPair() {
		ParamPairContext _localctx = new ParamPairContext(Context, State);
		EnterRule(_localctx, 60, RULE_paramPair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Macro) {
				{
				{
				State = 294;
				paramModifier();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 300;
			type(0);
			State = 301;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Macro() { return GetToken(AmethystParser.Macro, 0); }
		public ParamModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamModifierContext paramModifier() {
		ParamModifierContext _localctx = new ParamModifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_paramModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(Macro);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 64, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(LParen);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 377957208064L) != 0)) {
				{
				State = 306;
				expression();
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 307;
					Match(Comma);
					State = 308;
					expression();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 316;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(AmethystParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WeakRef() { return GetToken(AmethystParser.WeakRef, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 319;
			id();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 328;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 321;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 322;
						Match(LSquareBrak);
						State = 323;
						Match(RSquareBrak);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 324;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 325;
						Match(And);
						}
						break;
					case 3:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327;
						Match(WeakRef);
						}
						break;
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RawIdentifier() { return GetTokens(AmethystParser.RawIdentifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RawIdentifier(int i) {
			return GetToken(AmethystParser.RawIdentifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AmethystParser.Colon, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 68, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(RawIdentifier);
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 334;
				Match(Colon);
				State = 335;
				Match(RawIdentifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,339,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,5,0,78,8,0,10,0,12,0,81,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,2,5,2,90,8,2,10,2,12,2,93,9,2,1,2,5,2,96,8,2,10,2,12,2,99,9,2,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,5,5,113,8,5,10,5,12,5,116,9,
		5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,124,8,6,10,6,12,6,127,9,6,1,6,1,6,1,7,1,
		7,1,7,4,7,134,8,7,11,7,12,7,135,1,8,1,8,1,8,3,8,141,8,8,1,8,4,8,144,8,
		8,11,8,12,8,145,1,8,1,8,1,8,3,8,151,8,8,1,9,1,9,1,9,1,9,3,9,157,8,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,170,8,12,1,13,
		1,13,3,13,174,8,13,1,14,1,14,1,15,1,15,1,15,3,15,181,8,15,1,16,1,16,1,
		16,5,16,186,8,16,10,16,12,16,189,9,16,1,17,1,17,1,17,5,17,194,8,17,10,
		17,12,17,197,9,17,1,18,1,18,1,18,5,18,202,8,18,10,18,12,18,205,9,18,1,
		19,1,19,1,19,5,19,210,8,19,10,19,12,19,213,9,19,1,20,1,20,1,20,5,20,218,
		8,20,10,20,12,20,221,9,20,1,21,1,21,1,22,1,22,1,22,1,22,5,22,229,8,22,
		10,22,12,22,232,9,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,3,25,250,8,25,1,26,1,26,1,26,1,26,5,26,256,
		8,26,10,26,12,26,259,9,26,3,26,261,8,26,1,26,1,26,1,27,1,27,1,27,1,27,
		5,27,269,8,27,10,27,12,27,272,9,27,3,27,274,8,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,29,1,29,1,29,1,29,5,29,286,8,29,10,29,12,29,289,9,29,3,29,291,
		8,29,1,29,1,29,1,30,5,30,296,8,30,10,30,12,30,299,9,30,1,30,1,30,1,30,
		1,31,1,31,1,32,1,32,1,32,1,32,5,32,310,8,32,10,32,12,32,313,9,32,3,32,
		315,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,
		33,329,8,33,10,33,12,33,332,9,33,1,34,1,34,1,34,3,34,337,8,34,1,34,0,1,
		66,35,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,0,6,1,0,7,8,1,0,31,32,1,0,24,25,1,
		0,26,29,1,0,19,20,1,0,21,22,349,0,79,1,0,0,0,2,84,1,0,0,0,4,91,1,0,0,0,
		6,105,1,0,0,0,8,108,1,0,0,0,10,110,1,0,0,0,12,119,1,0,0,0,14,130,1,0,0,
		0,16,150,1,0,0,0,18,152,1,0,0,0,20,158,1,0,0,0,22,160,1,0,0,0,24,162,1,
		0,0,0,26,171,1,0,0,0,28,175,1,0,0,0,30,177,1,0,0,0,32,182,1,0,0,0,34,190,
		1,0,0,0,36,198,1,0,0,0,38,206,1,0,0,0,40,214,1,0,0,0,42,222,1,0,0,0,44,
		224,1,0,0,0,46,233,1,0,0,0,48,237,1,0,0,0,50,249,1,0,0,0,52,251,1,0,0,
		0,54,264,1,0,0,0,56,277,1,0,0,0,58,281,1,0,0,0,60,297,1,0,0,0,62,303,1,
		0,0,0,64,305,1,0,0,0,66,318,1,0,0,0,68,333,1,0,0,0,70,78,3,2,1,0,71,78,
		3,4,2,0,72,78,3,12,6,0,73,74,3,18,9,0,74,75,5,9,0,0,75,78,1,0,0,0,76,78,
		5,9,0,0,77,70,1,0,0,0,77,71,1,0,0,0,77,72,1,0,0,0,77,73,1,0,0,0,77,76,
		1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,
		1,0,0,0,82,83,5,0,0,1,83,1,1,0,0,0,84,85,5,1,0,0,85,86,3,68,34,0,86,87,
		5,9,0,0,87,3,1,0,0,0,88,90,3,6,3,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,
		0,0,0,91,92,1,0,0,0,92,97,1,0,0,0,93,91,1,0,0,0,94,96,3,8,4,0,95,94,1,
		0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,97,1,
		0,0,0,100,101,3,66,33,0,101,102,3,68,34,0,102,103,3,58,29,0,103,104,3,
		10,5,0,104,5,1,0,0,0,105,106,5,23,0,0,106,107,3,68,34,0,107,7,1,0,0,0,
		108,109,7,0,0,0,109,9,1,0,0,0,110,114,5,16,0,0,111,113,3,16,8,0,112,111,
		1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,
		0,116,114,1,0,0,0,117,118,5,17,0,0,118,11,1,0,0,0,119,120,5,5,0,0,120,
		121,3,68,34,0,121,125,5,16,0,0,122,124,3,14,7,0,123,122,1,0,0,0,124,127,
		1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,
		0,128,129,5,17,0,0,129,13,1,0,0,0,130,131,3,66,33,0,131,133,5,35,0,0,132,
		134,5,9,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,
		0,0,0,136,15,1,0,0,0,137,141,3,18,9,0,138,141,3,20,10,0,139,141,3,26,13,
		0,140,137,1,0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,143,1,0,0,0,142,
		144,5,9,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,
		0,0,0,146,151,1,0,0,0,147,151,3,22,11,0,148,151,3,10,5,0,149,151,3,24,
		12,0,150,140,1,0,0,0,150,147,1,0,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,
		17,1,0,0,0,152,153,3,66,33,0,153,156,3,68,34,0,154,155,5,18,0,0,155,157,
		3,28,14,0,156,154,1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,159,3,28,
		14,0,159,21,1,0,0,0,160,161,5,37,0,0,161,23,1,0,0,0,162,163,5,2,0,0,163,
		164,5,12,0,0,164,165,3,28,14,0,165,166,5,13,0,0,166,169,3,16,8,0,167,168,
		5,3,0,0,168,170,3,16,8,0,169,167,1,0,0,0,169,170,1,0,0,0,170,25,1,0,0,
		0,171,173,5,4,0,0,172,174,3,28,14,0,173,172,1,0,0,0,173,174,1,0,0,0,174,
		27,1,0,0,0,175,176,3,30,15,0,176,29,1,0,0,0,177,180,3,32,16,0,178,179,
		5,18,0,0,179,181,3,28,14,0,180,178,1,0,0,0,180,181,1,0,0,0,181,31,1,0,
		0,0,182,187,3,34,17,0,183,184,7,1,0,0,184,186,3,34,17,0,185,183,1,0,0,
		0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,33,1,0,0,0,189,187,
		1,0,0,0,190,195,3,36,18,0,191,192,7,2,0,0,192,194,3,36,18,0,193,191,1,
		0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,35,1,0,0,0,197,
		195,1,0,0,0,198,203,3,38,19,0,199,200,7,3,0,0,200,202,3,38,19,0,201,199,
		1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,37,1,0,0,0,
		205,203,1,0,0,0,206,211,3,40,20,0,207,208,7,4,0,0,208,210,3,40,20,0,209,
		207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,39,1,0,
		0,0,213,211,1,0,0,0,214,219,3,42,21,0,215,216,7,5,0,0,216,218,3,42,21,
		0,217,215,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,
		41,1,0,0,0,221,219,1,0,0,0,222,223,3,44,22,0,223,43,1,0,0,0,224,230,3,
		50,25,0,225,229,3,64,32,0,226,229,3,46,23,0,227,229,3,48,24,0,228,225,
		1,0,0,0,228,226,1,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,
		0,230,231,1,0,0,0,231,45,1,0,0,0,232,230,1,0,0,0,233,234,5,14,0,0,234,
		235,3,28,14,0,235,236,5,15,0,0,236,47,1,0,0,0,237,238,5,33,0,0,238,239,
		5,35,0,0,239,49,1,0,0,0,240,250,3,68,34,0,241,250,5,36,0,0,242,250,5,38,
		0,0,243,250,3,52,26,0,244,250,3,54,27,0,245,246,5,12,0,0,246,247,3,28,
		14,0,247,248,5,13,0,0,248,250,1,0,0,0,249,240,1,0,0,0,249,241,1,0,0,0,
		249,242,1,0,0,0,249,243,1,0,0,0,249,244,1,0,0,0,249,245,1,0,0,0,250,51,
		1,0,0,0,251,260,5,14,0,0,252,257,3,28,14,0,253,254,5,11,0,0,254,256,3,
		28,14,0,255,253,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,
		0,258,261,1,0,0,0,259,257,1,0,0,0,260,252,1,0,0,0,260,261,1,0,0,0,261,
		262,1,0,0,0,262,263,5,15,0,0,263,53,1,0,0,0,264,273,5,16,0,0,265,270,3,
		56,28,0,266,267,5,11,0,0,267,269,3,56,28,0,268,266,1,0,0,0,269,272,1,0,
		0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,273,
		265,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,17,0,0,276,55,1,
		0,0,0,277,278,5,35,0,0,278,279,5,10,0,0,279,280,3,28,14,0,280,57,1,0,0,
		0,281,290,5,12,0,0,282,287,3,60,30,0,283,284,5,11,0,0,284,286,3,60,30,
		0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,
		291,1,0,0,0,289,287,1,0,0,0,290,282,1,0,0,0,290,291,1,0,0,0,291,292,1,
		0,0,0,292,293,5,13,0,0,293,59,1,0,0,0,294,296,3,62,31,0,295,294,1,0,0,
		0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,
		297,1,0,0,0,300,301,3,66,33,0,301,302,3,68,34,0,302,61,1,0,0,0,303,304,
		5,6,0,0,304,63,1,0,0,0,305,314,5,12,0,0,306,311,3,28,14,0,307,308,5,11,
		0,0,308,310,3,28,14,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,
		311,312,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,314,306,1,0,0,0,314,315,
		1,0,0,0,315,316,1,0,0,0,316,317,5,13,0,0,317,65,1,0,0,0,318,319,6,33,-1,
		0,319,320,3,68,34,0,320,330,1,0,0,0,321,322,10,3,0,0,322,323,5,14,0,0,
		323,329,5,15,0,0,324,325,10,2,0,0,325,329,5,30,0,0,326,327,10,1,0,0,327,
		329,5,34,0,0,328,321,1,0,0,0,328,324,1,0,0,0,328,326,1,0,0,0,329,332,1,
		0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,67,1,0,0,0,332,330,1,0,0,0,333,
		336,5,35,0,0,334,335,5,10,0,0,335,337,5,35,0,0,336,334,1,0,0,0,336,337,
		1,0,0,0,337,69,1,0,0,0,34,77,79,91,97,114,125,135,140,145,150,156,169,
		173,180,187,195,203,211,219,228,230,249,257,260,270,273,287,290,297,311,
		314,328,330,336
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
