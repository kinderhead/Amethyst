//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Semi=5, Comma=6, LParen=7, RParen=8, 
		LBrak=9, RBrak=10, Eq=11, Plus=12, Minus=13, Star=14, Slash=15, Hash=16, 
		EqEq=17, Neq=18, Gt=19, Gte=20, Lt=21, Lte=22, AndAnd=23, OrOr=24, Identifier=25, 
		String=26, Command=27, Integer=28, Whitespace=29, Comment=30, LineComment=31;
	public const int
		RULE_root = 0, RULE_namespace = 1, RULE_function = 2, RULE_functionTag = 3, 
		RULE_block = 4, RULE_statement = 5, RULE_initAssignmentStatement = 6, 
		RULE_expressionStatement = 7, RULE_commandStatement = 8, RULE_ifStatement = 9, 
		RULE_returnStatement = 10, RULE_expression = 11, RULE_assignmentExpression = 12, 
		RULE_logicalExpression = 13, RULE_equalityExpression = 14, RULE_relationalExpression = 15, 
		RULE_additiveExpression = 16, RULE_multiplicativeExpression = 17, RULE_postfixExpression = 18, 
		RULE_primaryExpression = 19, RULE_paramList = 20, RULE_expressionList = 21, 
		RULE_type = 22;
	public static readonly string[] ruleNames = {
		"root", "namespace", "function", "functionTag", "block", "statement", 
		"initAssignmentStatement", "expressionStatement", "commandStatement", 
		"ifStatement", "returnStatement", "expression", "assignmentExpression", 
		"logicalExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "postfixExpression", "primaryExpression", 
		"paramList", "expressionList", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "';'", "','", "'('", 
		"')'", "'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'/'", "'#'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Semi", "Comma", "LParen", 
		"RParen", "LBrak", "RBrak", "Eq", "Plus", "Minus", "Star", "Slash", "Hash", 
		"EqEq", "Neq", "Gt", "Gte", "Lt", "Lte", "AndAnd", "OrOr", "Identifier", 
		"String", "Command", "Integer", "Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AmethystParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AmethystParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AmethystParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33619970L) != 0)) {
				{
				State = 48;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Namespace:
					{
					State = 46;
					@namespace();
					}
					break;
				case Hash:
				case Identifier:
					{
					State = 47;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(AmethystParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(AmethystParser.Semi, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(Namespace);
			State = 56;
			Match(Identifier);
			State = 57;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext[] functionTag() {
			return GetRuleContexts<FunctionTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext functionTag(int i) {
			return GetRuleContext<FunctionTagContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hash) {
				{
				{
				State = 59;
				functionTag();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			type();
			State = 66;
			_localctx.name = Match(Identifier);
			State = 67;
			paramList();
			State = 68;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(AmethystParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		public FunctionTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTagContext functionTag() {
		FunctionTagContext _localctx = new FunctionTagContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(Hash);
			State = 71;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(LBrak);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 503317140L) != 0)) {
				{
				{
				State = 74;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Return:
			case LParen:
			case Identifier:
			case String:
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 82;
					initAssignmentStatement();
					}
					break;
				case 2:
					{
					State = 83;
					expressionStatement();
					}
					break;
				case 3:
					{
					State = 84;
					returnStatement();
					}
					break;
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 87;
					Match(Semi);
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Semi );
				}
				break;
			case Command:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				commandStatement();
				}
				break;
			case LBrak:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_initAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			type();
			State = 98;
			Match(Identifier);
			State = 99;
			Match(Eq);
			State = 100;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Command() { return GetToken(AmethystParser.Command, 0); }
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_commandStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(Command);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(AmethystParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(AmethystParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(If);
			State = 107;
			Match(LParen);
			State = 108;
			expression();
			State = 109;
			Match(RParen);
			State = 110;
			statement();
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 111;
				Match(Else);
				State = 112;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(AmethystParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(Return);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 369098880L) != 0)) {
				{
				State = 116;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignmentExpression);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				logicalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				Match(Identifier);
				State = 123;
				Match(Eq);
				State = 124;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(AmethystParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(AmethystParser.AndAnd, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(AmethystParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(AmethystParser.OrOr, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			equalityExpression();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd || _la==OrOr) {
				{
				{
				State = 128;
				_la = TokenStream.LA(1);
				if ( !(_la==AndAnd || _la==OrOr) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 129;
				equalityExpression();
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EqEq() { return GetTokens(AmethystParser.EqEq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqEq(int i) {
			return GetToken(AmethystParser.EqEq, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Neq() { return GetTokens(AmethystParser.Neq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq(int i) {
			return GetToken(AmethystParser.Neq, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			relationalExpression();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EqEq || _la==Neq) {
				{
				{
				State = 136;
				_la = TokenStream.LA(1);
				if ( !(_la==EqEq || _la==Neq) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 137;
				relationalExpression();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gt() { return GetTokens(AmethystParser.Gt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt(int i) {
			return GetToken(AmethystParser.Gt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gte() { return GetTokens(AmethystParser.Gte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gte(int i) {
			return GetToken(AmethystParser.Gte, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lt() { return GetTokens(AmethystParser.Lt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt(int i) {
			return GetToken(AmethystParser.Lt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lte() { return GetTokens(AmethystParser.Lte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lte(int i) {
			return GetToken(AmethystParser.Lte, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			additiveExpression();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) {
				{
				{
				State = 144;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 145;
				additiveExpression();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(AmethystParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(AmethystParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			multiplicativeExpression();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 152;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 153;
				multiplicativeExpression();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext[] postfixExpression() {
			return GetRuleContexts<PostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression(int i) {
			return GetRuleContext<PostfixExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(AmethystParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(AmethystParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(AmethystParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(AmethystParser.Slash, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			postfixExpression();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star || _la==Slash) {
				{
				{
				State = 160;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Slash) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 161;
				postfixExpression();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			primaryExpression();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LParen) {
				{
				{
				State = 168;
				expressionList();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(AmethystParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(AmethystParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primaryExpression);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(Identifier);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(String);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				Match(Integer);
				}
				break;
			case LParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				Match(LParen);
				State = 178;
				expression();
				State = 179;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(AmethystParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(AmethystParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 40, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LParen);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 184;
				type();
				State = 185;
				Match(Identifier);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 186;
					Match(Comma);
					State = 187;
					type();
					State = 188;
					Match(Identifier);
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 197;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(LParen);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 369098880L) != 0)) {
				{
				State = 200;
				expression();
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 201;
					Match(Comma);
					State = 202;
					expression();
					}
					}
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 210;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,215,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,1,0,5,0,49,8,0,10,0,12,0,52,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,2,5,2,61,8,2,10,2,12,2,64,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,
		4,5,4,76,8,4,10,4,12,4,79,9,4,1,4,1,4,1,5,1,5,1,5,3,5,86,8,5,1,5,4,5,89,
		8,5,11,5,12,5,90,1,5,1,5,1,5,3,5,96,8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,114,8,9,1,10,1,10,3,10,118,8,10,
		1,11,1,11,1,12,1,12,1,12,1,12,3,12,126,8,12,1,13,1,13,1,13,5,13,131,8,
		13,10,13,12,13,134,9,13,1,14,1,14,1,14,5,14,139,8,14,10,14,12,14,142,9,
		14,1,15,1,15,1,15,5,15,147,8,15,10,15,12,15,150,9,15,1,16,1,16,1,16,5,
		16,155,8,16,10,16,12,16,158,9,16,1,17,1,17,1,17,5,17,163,8,17,10,17,12,
		17,166,9,17,1,18,1,18,5,18,170,8,18,10,18,12,18,173,9,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,3,19,182,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,
		20,191,8,20,10,20,12,20,194,9,20,3,20,196,8,20,1,20,1,20,1,21,1,21,1,21,
		1,21,5,21,204,8,21,10,21,12,21,207,9,21,3,21,209,8,21,1,21,1,21,1,22,1,
		22,1,22,0,0,23,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,0,5,1,0,23,24,1,0,17,18,1,0,19,22,1,0,12,13,1,0,14,15,217,0,50,
		1,0,0,0,2,55,1,0,0,0,4,62,1,0,0,0,6,70,1,0,0,0,8,73,1,0,0,0,10,95,1,0,
		0,0,12,97,1,0,0,0,14,102,1,0,0,0,16,104,1,0,0,0,18,106,1,0,0,0,20,115,
		1,0,0,0,22,119,1,0,0,0,24,125,1,0,0,0,26,127,1,0,0,0,28,135,1,0,0,0,30,
		143,1,0,0,0,32,151,1,0,0,0,34,159,1,0,0,0,36,167,1,0,0,0,38,181,1,0,0,
		0,40,183,1,0,0,0,42,199,1,0,0,0,44,212,1,0,0,0,46,49,3,2,1,0,47,49,3,4,
		2,0,48,46,1,0,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,
		0,0,51,53,1,0,0,0,52,50,1,0,0,0,53,54,5,0,0,1,54,1,1,0,0,0,55,56,5,1,0,
		0,56,57,5,25,0,0,57,58,5,5,0,0,58,3,1,0,0,0,59,61,3,6,3,0,60,59,1,0,0,
		0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,
		0,65,66,3,44,22,0,66,67,5,25,0,0,67,68,3,40,20,0,68,69,3,8,4,0,69,5,1,
		0,0,0,70,71,5,16,0,0,71,72,5,25,0,0,72,7,1,0,0,0,73,77,5,9,0,0,74,76,3,
		10,5,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,80,1,
		0,0,0,79,77,1,0,0,0,80,81,5,10,0,0,81,9,1,0,0,0,82,86,3,12,6,0,83,86,3,
		14,7,0,84,86,3,20,10,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,88,
		1,0,0,0,87,89,5,5,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,
		1,0,0,0,91,96,1,0,0,0,92,96,3,16,8,0,93,96,3,8,4,0,94,96,3,18,9,0,95,85,
		1,0,0,0,95,92,1,0,0,0,95,93,1,0,0,0,95,94,1,0,0,0,96,11,1,0,0,0,97,98,
		3,44,22,0,98,99,5,25,0,0,99,100,5,11,0,0,100,101,3,22,11,0,101,13,1,0,
		0,0,102,103,3,22,11,0,103,15,1,0,0,0,104,105,5,27,0,0,105,17,1,0,0,0,106,
		107,5,2,0,0,107,108,5,7,0,0,108,109,3,22,11,0,109,110,5,8,0,0,110,113,
		3,10,5,0,111,112,5,3,0,0,112,114,3,10,5,0,113,111,1,0,0,0,113,114,1,0,
		0,0,114,19,1,0,0,0,115,117,5,4,0,0,116,118,3,22,11,0,117,116,1,0,0,0,117,
		118,1,0,0,0,118,21,1,0,0,0,119,120,3,24,12,0,120,23,1,0,0,0,121,126,3,
		26,13,0,122,123,5,25,0,0,123,124,5,11,0,0,124,126,3,22,11,0,125,121,1,
		0,0,0,125,122,1,0,0,0,126,25,1,0,0,0,127,132,3,28,14,0,128,129,7,0,0,0,
		129,131,3,28,14,0,130,128,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,
		133,1,0,0,0,133,27,1,0,0,0,134,132,1,0,0,0,135,140,3,30,15,0,136,137,7,
		1,0,0,137,139,3,30,15,0,138,136,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
		0,140,141,1,0,0,0,141,29,1,0,0,0,142,140,1,0,0,0,143,148,3,32,16,0,144,
		145,7,2,0,0,145,147,3,32,16,0,146,144,1,0,0,0,147,150,1,0,0,0,148,146,
		1,0,0,0,148,149,1,0,0,0,149,31,1,0,0,0,150,148,1,0,0,0,151,156,3,34,17,
		0,152,153,7,3,0,0,153,155,3,34,17,0,154,152,1,0,0,0,155,158,1,0,0,0,156,
		154,1,0,0,0,156,157,1,0,0,0,157,33,1,0,0,0,158,156,1,0,0,0,159,164,3,36,
		18,0,160,161,7,4,0,0,161,163,3,36,18,0,162,160,1,0,0,0,163,166,1,0,0,0,
		164,162,1,0,0,0,164,165,1,0,0,0,165,35,1,0,0,0,166,164,1,0,0,0,167,171,
		3,38,19,0,168,170,3,42,21,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,
		0,0,0,171,172,1,0,0,0,172,37,1,0,0,0,173,171,1,0,0,0,174,182,5,25,0,0,
		175,182,5,26,0,0,176,182,5,28,0,0,177,178,5,7,0,0,178,179,3,22,11,0,179,
		180,5,8,0,0,180,182,1,0,0,0,181,174,1,0,0,0,181,175,1,0,0,0,181,176,1,
		0,0,0,181,177,1,0,0,0,182,39,1,0,0,0,183,195,5,7,0,0,184,185,3,44,22,0,
		185,192,5,25,0,0,186,187,5,6,0,0,187,188,3,44,22,0,188,189,5,25,0,0,189,
		191,1,0,0,0,190,186,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,
		0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,195,184,1,0,0,0,195,196,1,0,0,0,
		196,197,1,0,0,0,197,198,5,8,0,0,198,41,1,0,0,0,199,208,5,7,0,0,200,205,
		3,22,11,0,201,202,5,6,0,0,202,204,3,22,11,0,203,201,1,0,0,0,204,207,1,
		0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,
		208,200,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,5,8,0,0,211,43,
		1,0,0,0,212,213,5,25,0,0,213,45,1,0,0,0,21,48,50,62,77,85,90,95,113,117,
		125,132,140,148,156,164,171,181,192,195,205,208
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
