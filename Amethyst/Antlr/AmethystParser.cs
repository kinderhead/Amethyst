//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, If=2, Else=3, Return=4, Macro=5, NoStack=6, Semi=7, Comma=8, 
		LParen=9, RParen=10, LSquareBrak=11, RSquareBrak=12, LBrak=13, RBrak=14, 
		Eq=15, Plus=16, Minus=17, Star=18, Slash=19, Hash=20, EqEq=21, Neq=22, 
		Gt=23, Gte=24, Lt=25, Lte=26, AndAnd=27, OrOr=28, Identifier=29, String=30, 
		Command=31, Integer=32, Whitespace=33, Comment=34, LineComment=35;
	public const int
		RULE_root = 0, RULE_namespace = 1, RULE_function = 2, RULE_functionTag = 3, 
		RULE_functionModifier = 4, RULE_block = 5, RULE_statement = 6, RULE_initAssignmentStatement = 7, 
		RULE_expressionStatement = 8, RULE_commandStatement = 9, RULE_ifStatement = 10, 
		RULE_returnStatement = 11, RULE_expression = 12, RULE_assignmentExpression = 13, 
		RULE_logicalExpression = 14, RULE_equalityExpression = 15, RULE_relationalExpression = 16, 
		RULE_additiveExpression = 17, RULE_multiplicativeExpression = 18, RULE_postfixExpression = 19, 
		RULE_indexExpression = 20, RULE_primaryExpression = 21, RULE_listLiteral = 22, 
		RULE_paramList = 23, RULE_paramPair = 24, RULE_paramModifier = 25, RULE_expressionList = 26, 
		RULE_type = 27;
	public static readonly string[] ruleNames = {
		"root", "namespace", "function", "functionTag", "functionModifier", "block", 
		"statement", "initAssignmentStatement", "expressionStatement", "commandStatement", 
		"ifStatement", "returnStatement", "expression", "assignmentExpression", 
		"logicalExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "postfixExpression", "indexExpression", "primaryExpression", 
		"listLiteral", "paramList", "paramPair", "paramModifier", "expressionList", 
		"type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'if'", "'else'", "'return'", "'macro'", "'nostack'", 
		"';'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+'", 
		"'-'", "'*'", "'/'", "'#'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
		"'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "If", "Else", "Return", "Macro", "NoStack", "Semi", 
		"Comma", "LParen", "RParen", "LSquareBrak", "RSquareBrak", "LBrak", "RBrak", 
		"Eq", "Plus", "Minus", "Star", "Slash", "Hash", "EqEq", "Neq", "Gt", "Gte", 
		"Lt", "Lte", "AndAnd", "OrOr", "Identifier", "String", "Command", "Integer", 
		"Whitespace", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AmethystParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AmethystParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AmethystParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 537919554L) != 0)) {
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Namespace:
					{
					State = 56;
					@namespace();
					}
					break;
				case NoStack:
				case Hash:
				case Identifier:
					{
					State = 57;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(AmethystParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(AmethystParser.Semi, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(Namespace);
			State = 66;
			Match(Identifier);
			State = 67;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext[] functionTag() {
			return GetRuleContexts<FunctionTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTagContext functionTag(int i) {
			return GetRuleContext<FunctionTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hash) {
				{
				{
				State = 69;
				functionTag();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NoStack) {
				{
				{
				State = 75;
				functionModifier();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			type(0);
			State = 82;
			_localctx.name = Match(Identifier);
			State = 83;
			paramList();
			State = 84;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(AmethystParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		public FunctionTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTagContext functionTag() {
		FunctionTagContext _localctx = new FunctionTagContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(Hash);
			State = 87;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoStack() { return GetToken(AmethystParser.NoStack, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(NoStack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(LBrak);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053074452L) != 0)) {
				{
				{
				State = 92;
				statement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Return:
			case LParen:
			case LSquareBrak:
			case Identifier:
			case String:
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 100;
					initAssignmentStatement();
					}
					break;
				case 2:
					{
					State = 101;
					expressionStatement();
					}
					break;
				case 3:
					{
					State = 102;
					returnStatement();
					}
					break;
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 105;
					Match(Semi);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Semi );
				}
				break;
			case Command:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				commandStatement();
				}
				break;
			case LBrak:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_initAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			type(0);
			State = 116;
			Match(Identifier);
			State = 117;
			Match(Eq);
			State = 118;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Command() { return GetToken(AmethystParser.Command, 0); }
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_commandStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(Command);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(AmethystParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(AmethystParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(If);
			State = 125;
			Match(LParen);
			State = 126;
			expression();
			State = 127;
			Match(RParen);
			State = 128;
			statement();
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 129;
				Match(Else);
				State = 130;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(AmethystParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(Return);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5905582592L) != 0)) {
				{
				State = 134;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignmentExpression);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				logicalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(Identifier);
				State = 141;
				Match(Eq);
				State = 142;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(AmethystParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(AmethystParser.AndAnd, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(AmethystParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(AmethystParser.OrOr, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			equalityExpression();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd || _la==OrOr) {
				{
				{
				State = 146;
				_la = TokenStream.LA(1);
				if ( !(_la==AndAnd || _la==OrOr) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 147;
				equalityExpression();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EqEq() { return GetTokens(AmethystParser.EqEq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqEq(int i) {
			return GetToken(AmethystParser.EqEq, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Neq() { return GetTokens(AmethystParser.Neq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq(int i) {
			return GetToken(AmethystParser.Neq, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			relationalExpression();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EqEq || _la==Neq) {
				{
				{
				State = 154;
				_la = TokenStream.LA(1);
				if ( !(_la==EqEq || _la==Neq) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 155;
				relationalExpression();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gt() { return GetTokens(AmethystParser.Gt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt(int i) {
			return GetToken(AmethystParser.Gt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Gte() { return GetTokens(AmethystParser.Gte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gte(int i) {
			return GetToken(AmethystParser.Gte, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lt() { return GetTokens(AmethystParser.Lt); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt(int i) {
			return GetToken(AmethystParser.Lt, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lte() { return GetTokens(AmethystParser.Lte); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lte(int i) {
			return GetToken(AmethystParser.Lte, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			additiveExpression();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 125829120L) != 0)) {
				{
				{
				State = 162;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 125829120L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 163;
				additiveExpression();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(AmethystParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(AmethystParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			multiplicativeExpression();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 170;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 171;
				multiplicativeExpression();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext[] postfixExpression() {
			return GetRuleContexts<PostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression(int i) {
			return GetRuleContext<PostfixExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(AmethystParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(AmethystParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(AmethystParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(AmethystParser.Slash, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			postfixExpression();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star || _la==Slash) {
				{
				{
				State = 178;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Slash) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 179;
				postfixExpression();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			primaryExpression();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LParen || _la==LSquareBrak) {
				{
				State = 188;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LParen:
					{
					State = 186;
					expressionList();
					}
					break;
				case LSquareBrak:
					{
					State = 187;
					indexExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(LSquareBrak);
			State = 194;
			expression();
			State = 195;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(AmethystParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(AmethystParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_primaryExpression);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				Match(Identifier);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(String);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199;
				Match(Integer);
				}
				break;
			case LSquareBrak:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200;
				listLiteral();
				}
				break;
			case LParen:
				EnterOuterAlt(_localctx, 5);
				{
				State = 201;
				Match(LParen);
				State = 202;
				expression();
				State = 203;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(LSquareBrak);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5905582592L) != 0)) {
				{
				State = 208;
				expression();
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 209;
					Match(Comma);
					State = 210;
					expression();
					}
					}
					State = 215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 218;
			Match(RSquareBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext[] paramPair() {
			return GetRuleContexts<ParamPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamPairContext paramPair(int i) {
			return GetRuleContext<ParamPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 46, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(LParen);
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Macro || _la==Identifier) {
				{
				State = 221;
				paramPair();
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 222;
					Match(Comma);
					State = 223;
					paramPair();
					}
					}
					State = 228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 231;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext[] paramModifier() {
			return GetRuleContexts<ParamModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamModifierContext paramModifier(int i) {
			return GetRuleContext<ParamModifierContext>(i);
		}
		public ParamPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamPairContext paramPair() {
		ParamPairContext _localctx = new ParamPairContext(Context, State);
		EnterRule(_localctx, 48, RULE_paramPair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Macro) {
				{
				{
				State = 233;
				paramModifier();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239;
			type(0);
			State = 240;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Macro() { return GetToken(AmethystParser.Macro, 0); }
		public ParamModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamModifierContext paramModifier() {
		ParamModifierContext _localctx = new ParamModifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_paramModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(Macro);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 52, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(LParen);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5905582592L) != 0)) {
				{
				State = 245;
				expression();
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 246;
					Match(Comma);
					State = 247;
					expression();
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 255;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSquareBrak() { return GetToken(AmethystParser.LSquareBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSquareBrak() { return GetToken(AmethystParser.RSquareBrak, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 258;
			Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 260;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 261;
					Match(LSquareBrak);
					State = 262;
					Match(RSquareBrak);
					}
					} 
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,269,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,5,
		0,59,8,0,10,0,12,0,62,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,71,8,2,10,2,
		12,2,74,9,2,1,2,5,2,77,8,2,10,2,12,2,80,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,1,4,1,4,1,5,1,5,5,5,94,8,5,10,5,12,5,97,9,5,1,5,1,5,1,6,1,6,1,6,
		3,6,104,8,6,1,6,4,6,107,8,6,11,6,12,6,108,1,6,1,6,1,6,3,6,114,8,6,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		132,8,10,1,11,1,11,3,11,136,8,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,144,
		8,13,1,14,1,14,1,14,5,14,149,8,14,10,14,12,14,152,9,14,1,15,1,15,1,15,
		5,15,157,8,15,10,15,12,15,160,9,15,1,16,1,16,1,16,5,16,165,8,16,10,16,
		12,16,168,9,16,1,17,1,17,1,17,5,17,173,8,17,10,17,12,17,176,9,17,1,18,
		1,18,1,18,5,18,181,8,18,10,18,12,18,184,9,18,1,19,1,19,1,19,5,19,189,8,
		19,10,19,12,19,192,9,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,3,21,206,8,21,1,22,1,22,1,22,1,22,5,22,212,8,22,10,22,12,
		22,215,9,22,3,22,217,8,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,225,8,23,
		10,23,12,23,228,9,23,3,23,230,8,23,1,23,1,23,1,24,5,24,235,8,24,10,24,
		12,24,238,9,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,249,8,
		26,10,26,12,26,252,9,26,3,26,254,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
		27,1,27,5,27,264,8,27,10,27,12,27,267,9,27,1,27,0,1,54,28,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,5,
		1,0,27,28,1,0,21,22,1,0,23,26,1,0,16,17,1,0,18,19,273,0,60,1,0,0,0,2,65,
		1,0,0,0,4,72,1,0,0,0,6,86,1,0,0,0,8,89,1,0,0,0,10,91,1,0,0,0,12,113,1,
		0,0,0,14,115,1,0,0,0,16,120,1,0,0,0,18,122,1,0,0,0,20,124,1,0,0,0,22,133,
		1,0,0,0,24,137,1,0,0,0,26,143,1,0,0,0,28,145,1,0,0,0,30,153,1,0,0,0,32,
		161,1,0,0,0,34,169,1,0,0,0,36,177,1,0,0,0,38,185,1,0,0,0,40,193,1,0,0,
		0,42,205,1,0,0,0,44,207,1,0,0,0,46,220,1,0,0,0,48,236,1,0,0,0,50,242,1,
		0,0,0,52,244,1,0,0,0,54,257,1,0,0,0,56,59,3,2,1,0,57,59,3,4,2,0,58,56,
		1,0,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,
		1,0,0,0,62,60,1,0,0,0,63,64,5,0,0,1,64,1,1,0,0,0,65,66,5,1,0,0,66,67,5,
		29,0,0,67,68,5,7,0,0,68,3,1,0,0,0,69,71,3,6,3,0,70,69,1,0,0,0,71,74,1,
		0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,78,1,0,0,0,74,72,1,0,0,0,75,77,3,
		8,4,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,
		0,0,0,80,78,1,0,0,0,81,82,3,54,27,0,82,83,5,29,0,0,83,84,3,46,23,0,84,
		85,3,10,5,0,85,5,1,0,0,0,86,87,5,20,0,0,87,88,5,29,0,0,88,7,1,0,0,0,89,
		90,5,6,0,0,90,9,1,0,0,0,91,95,5,13,0,0,92,94,3,12,6,0,93,92,1,0,0,0,94,
		97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,
		99,5,14,0,0,99,11,1,0,0,0,100,104,3,14,7,0,101,104,3,16,8,0,102,104,3,
		22,11,0,103,100,1,0,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,106,1,0,0,
		0,105,107,5,7,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,
		109,1,0,0,0,109,114,1,0,0,0,110,114,3,18,9,0,111,114,3,10,5,0,112,114,
		3,20,10,0,113,103,1,0,0,0,113,110,1,0,0,0,113,111,1,0,0,0,113,112,1,0,
		0,0,114,13,1,0,0,0,115,116,3,54,27,0,116,117,5,29,0,0,117,118,5,15,0,0,
		118,119,3,24,12,0,119,15,1,0,0,0,120,121,3,24,12,0,121,17,1,0,0,0,122,
		123,5,31,0,0,123,19,1,0,0,0,124,125,5,2,0,0,125,126,5,9,0,0,126,127,3,
		24,12,0,127,128,5,10,0,0,128,131,3,12,6,0,129,130,5,3,0,0,130,132,3,12,
		6,0,131,129,1,0,0,0,131,132,1,0,0,0,132,21,1,0,0,0,133,135,5,4,0,0,134,
		136,3,24,12,0,135,134,1,0,0,0,135,136,1,0,0,0,136,23,1,0,0,0,137,138,3,
		26,13,0,138,25,1,0,0,0,139,144,3,28,14,0,140,141,5,29,0,0,141,142,5,15,
		0,0,142,144,3,24,12,0,143,139,1,0,0,0,143,140,1,0,0,0,144,27,1,0,0,0,145,
		150,3,30,15,0,146,147,7,0,0,0,147,149,3,30,15,0,148,146,1,0,0,0,149,152,
		1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,29,1,0,0,0,152,150,1,0,0,0,
		153,158,3,32,16,0,154,155,7,1,0,0,155,157,3,32,16,0,156,154,1,0,0,0,157,
		160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,31,1,0,0,0,160,158,1,0,
		0,0,161,166,3,34,17,0,162,163,7,2,0,0,163,165,3,34,17,0,164,162,1,0,0,
		0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,33,1,0,0,0,168,166,
		1,0,0,0,169,174,3,36,18,0,170,171,7,3,0,0,171,173,3,36,18,0,172,170,1,
		0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,35,1,0,0,0,176,
		174,1,0,0,0,177,182,3,38,19,0,178,179,7,4,0,0,179,181,3,38,19,0,180,178,
		1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,37,1,0,0,0,
		184,182,1,0,0,0,185,190,3,42,21,0,186,189,3,52,26,0,187,189,3,40,20,0,
		188,186,1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,
		1,0,0,0,191,39,1,0,0,0,192,190,1,0,0,0,193,194,5,11,0,0,194,195,3,24,12,
		0,195,196,5,12,0,0,196,41,1,0,0,0,197,206,5,29,0,0,198,206,5,30,0,0,199,
		206,5,32,0,0,200,206,3,44,22,0,201,202,5,9,0,0,202,203,3,24,12,0,203,204,
		5,10,0,0,204,206,1,0,0,0,205,197,1,0,0,0,205,198,1,0,0,0,205,199,1,0,0,
		0,205,200,1,0,0,0,205,201,1,0,0,0,206,43,1,0,0,0,207,216,5,11,0,0,208,
		213,3,24,12,0,209,210,5,8,0,0,210,212,3,24,12,0,211,209,1,0,0,0,212,215,
		1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,
		0,216,208,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,5,12,0,0,219,
		45,1,0,0,0,220,229,5,9,0,0,221,226,3,48,24,0,222,223,5,8,0,0,223,225,3,
		48,24,0,224,222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,
		0,227,230,1,0,0,0,228,226,1,0,0,0,229,221,1,0,0,0,229,230,1,0,0,0,230,
		231,1,0,0,0,231,232,5,10,0,0,232,47,1,0,0,0,233,235,3,50,25,0,234,233,
		1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,
		0,238,236,1,0,0,0,239,240,3,54,27,0,240,241,5,29,0,0,241,49,1,0,0,0,242,
		243,5,5,0,0,243,51,1,0,0,0,244,253,5,9,0,0,245,250,3,24,12,0,246,247,5,
		8,0,0,247,249,3,24,12,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,
		0,250,251,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,253,245,1,0,0,0,253,
		254,1,0,0,0,254,255,1,0,0,0,255,256,5,10,0,0,256,53,1,0,0,0,257,258,6,
		27,-1,0,258,259,5,29,0,0,259,265,1,0,0,0,260,261,10,1,0,0,261,262,5,11,
		0,0,262,264,5,12,0,0,263,260,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,
		266,1,0,0,0,266,55,1,0,0,0,267,265,1,0,0,0,27,58,60,72,78,95,103,108,113,
		131,135,143,150,158,166,174,182,188,190,205,213,216,226,229,236,250,253,
		265
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
