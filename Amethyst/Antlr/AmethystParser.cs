//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Datapack.Net/Amethyst/Amethyst.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amethyst.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AmethystParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Namespace=1, Semi=2, Comma=3, LParen=4, RParen=5, LBrak=6, RBrak=7, Eq=8, 
		Plus=9, Minus=10, Identifier=11, String=12, Integer=13, Whitespace=14;
	public const int
		RULE_root = 0, RULE_namespace = 1, RULE_function = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_initAssignmentStatement = 5, RULE_expressionStatement = 6, 
		RULE_expression = 7, RULE_assignmentExpression = 8, RULE_additiveExpression = 9, 
		RULE_primaryExpression = 10, RULE_paramList = 11, RULE_type = 12;
	public static readonly string[] ruleNames = {
		"root", "namespace", "function", "block", "statement", "initAssignmentStatement", 
		"expressionStatement", "expression", "assignmentExpression", "additiveExpression", 
		"primaryExpression", "paramList", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "';'", "','", "'('", "')'", "'{'", "'}'", "'='", 
		"'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Namespace", "Semi", "Comma", "LParen", "RParen", "LBrak", "RBrak", 
		"Eq", "Plus", "Minus", "Identifier", "String", "Integer", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Amethyst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AmethystParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AmethystParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AmethystParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AmethystParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Namespace || _la==Identifier) {
				{
				State = 28;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Namespace:
					{
					State = 26;
					@namespace();
					}
					break;
				case Identifier:
					{
					State = 27;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(AmethystParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(AmethystParser.Semi, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(Namespace);
			State = 36;
			Match(Identifier);
			State = 37;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			type();
			State = 40;
			Match(Identifier);
			State = 41;
			paramList();
			State = 42;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrak() { return GetToken(AmethystParser.LBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrak() { return GetToken(AmethystParser.RBrak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(LBrak);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14416L) != 0)) {
				{
				{
				State = 45;
				statement();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(RBrak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(AmethystParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(AmethystParser.Semi, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 53;
				initAssignmentStatement();
				}
				break;
			case 2:
				{
				State = 54;
				block();
				}
				break;
			case 3:
				{
				State = 55;
				expressionStatement();
				}
				break;
			}
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 58;
				Match(Semi);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Semi );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_initAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			type();
			State = 64;
			Match(Identifier);
			State = 65;
			Match(Eq);
			State = 66;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(AmethystParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentExpression);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				additiveExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				Match(Identifier);
				State = 74;
				Match(Eq);
				State = 75;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(AmethystParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(AmethystParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(AmethystParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(AmethystParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			primaryExpression();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 79;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 80;
				primaryExpression();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(AmethystParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(AmethystParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_primaryExpression);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(Identifier);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(String);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88;
				Match(Integer);
				}
				break;
			case LParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				Match(LParen);
				State = 90;
				expression();
				State = 91;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(AmethystParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(AmethystParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(AmethystParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(AmethystParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(AmethystParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(AmethystParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 22, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(LParen);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				{
				State = 96;
				type();
				State = 97;
				Match(Identifier);
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 99;
					Match(Comma);
					State = 100;
					type();
					State = 101;
					Match(Identifier);
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 110;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AmethystParser.Identifier, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAmethystVisitor<TResult> typedVisitor = visitor as IAmethystVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,115,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,5,0,29,8,0,10,
		0,12,0,32,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,
		47,8,3,10,3,12,3,50,9,3,1,3,1,3,1,4,1,4,1,4,3,4,57,8,4,1,4,4,4,60,8,4,
		11,4,12,4,61,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,3,8,77,
		8,8,1,9,1,9,1,9,5,9,82,8,9,10,9,12,9,85,9,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,3,10,94,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,104,
		8,11,10,11,12,11,107,9,11,3,11,109,8,11,1,11,1,11,1,12,1,12,1,12,0,0,13,
		0,2,4,6,8,10,12,14,16,18,20,22,24,0,1,1,0,9,10,114,0,30,1,0,0,0,2,35,1,
		0,0,0,4,39,1,0,0,0,6,44,1,0,0,0,8,56,1,0,0,0,10,63,1,0,0,0,12,68,1,0,0,
		0,14,70,1,0,0,0,16,76,1,0,0,0,18,78,1,0,0,0,20,93,1,0,0,0,22,95,1,0,0,
		0,24,112,1,0,0,0,26,29,3,2,1,0,27,29,3,4,2,0,28,26,1,0,0,0,28,27,1,0,0,
		0,29,32,1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,33,1,0,0,0,32,30,1,0,0,
		0,33,34,5,0,0,1,34,1,1,0,0,0,35,36,5,1,0,0,36,37,5,11,0,0,37,38,5,2,0,
		0,38,3,1,0,0,0,39,40,3,24,12,0,40,41,5,11,0,0,41,42,3,22,11,0,42,43,3,
		6,3,0,43,5,1,0,0,0,44,48,5,6,0,0,45,47,3,8,4,0,46,45,1,0,0,0,47,50,1,0,
		0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,48,1,0,0,0,51,52,5,7,
		0,0,52,7,1,0,0,0,53,57,3,10,5,0,54,57,3,6,3,0,55,57,3,12,6,0,56,53,1,0,
		0,0,56,54,1,0,0,0,56,55,1,0,0,0,57,59,1,0,0,0,58,60,5,2,0,0,59,58,1,0,
		0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,9,1,0,0,0,63,64,3,24,
		12,0,64,65,5,11,0,0,65,66,5,8,0,0,66,67,3,14,7,0,67,11,1,0,0,0,68,69,3,
		14,7,0,69,13,1,0,0,0,70,71,3,16,8,0,71,15,1,0,0,0,72,77,3,18,9,0,73,74,
		5,11,0,0,74,75,5,8,0,0,75,77,3,14,7,0,76,72,1,0,0,0,76,73,1,0,0,0,77,17,
		1,0,0,0,78,83,3,20,10,0,79,80,7,0,0,0,80,82,3,20,10,0,81,79,1,0,0,0,82,
		85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,19,1,0,0,0,85,83,1,0,0,0,86,
		94,5,11,0,0,87,94,5,12,0,0,88,94,5,13,0,0,89,90,5,4,0,0,90,91,3,14,7,0,
		91,92,5,5,0,0,92,94,1,0,0,0,93,86,1,0,0,0,93,87,1,0,0,0,93,88,1,0,0,0,
		93,89,1,0,0,0,94,21,1,0,0,0,95,108,5,4,0,0,96,97,3,24,12,0,97,98,5,11,
		0,0,98,105,1,0,0,0,99,100,5,3,0,0,100,101,3,24,12,0,101,102,5,11,0,0,102,
		104,1,0,0,0,103,99,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,
		0,0,106,109,1,0,0,0,107,105,1,0,0,0,108,96,1,0,0,0,108,109,1,0,0,0,109,
		110,1,0,0,0,110,111,5,5,0,0,111,23,1,0,0,0,112,113,5,11,0,0,113,25,1,0,
		0,0,10,28,30,48,56,61,76,83,93,105,108
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amethyst.Antlr
