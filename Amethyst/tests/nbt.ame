namespace test;

struct vec {
    int x;
    int y;
    int z;

    int sum() {
        return this.x + this.y + this.z;
    }
}

struct vec2 {
    int x;
    int y;
    int z;

    vec2(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    int sum() {
        return this.x + this.y + this.z;
    }
}

struct subvec implements vec2 {
    subvec(int x, int y, int z) : vec2(x * 2, y * 2, z * 2) { }
}

#test
void test_nbt() {
    start("nbt");
    
    nbt obj;
    obj.x = 100;
    assert((int)obj.x == 100);

    complete();
}

#test
void test_static() {
    start("nbt static");
    
    vec obj = { x: 100 };
    obj.y = 7;

    assert(obj.x == 100);
    assert(obj.y == 7);
    assert(obj.z == 0);
    assert(obj.sum() == 107);

    complete();
}

#test
void test_constructor() {
    start("nbt constructor");
    
    vec2 obj = vec2(3, 6, 4);

    assert(obj.x == 3);
    assert(obj.y == 6);
    assert(obj.z == 4);
    assert(obj.sum() == 13);

    complete();
}

#test
void test_inheritance() {
    start("nbt inheritance");
    
    subvec obj = subvec(1, 2, 3);

    assert(obj.x == 2);
    assert(obj.y == 4);
    assert(obj.z == 6);
    assert(obj.sum() == 12);

    complete();
}

#test
void test_nbt_literal() {
    start("nbt literal");
    
    nbt obj = { x: 100 };
    assert((int)obj.x == 100);

    complete();
}
